{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 7b77685886f19613434b","webpack:///./index.jsx","webpack:///external \"Immutable\"","webpack:///./../build/collection/collection-utils.js","webpack:///./../build/localstorage.js","webpack:///./config/config.js","webpack:///./config/project.conf.js","webpack:///./../src/collection/collection-utils.js","webpack:///./../build/collection/collection.js","webpack:///./../build/collection/mockUtils.js","webpack:///./../build/collection/persist.js","webpack:///./../build/collection/query.js","webpack:///./../build/config/mock.conf.js","webpack:///./../build/utils.js","webpack:///./../src/utils.js","webpack:///external \"PubSub\"","webpack:///external \"React\"","webpack:///external \"ReactDOM\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_react","_react2","_reactDom","_collectionUtils","_collectionUtils2","_config","_config2","_localstorage","_localstorage2","App","_React$Component","this","_this","getPrototypeOf","state","items","project","window","db","findOne","projectId","console","log","localStorage","getItem","find","searchStr","insert","projectName","projectNameShort","projectCode","projectNameSpace","projectDesc","commonFlag","fileListStr","inFile","fileName","fileType","sysDefault","importanceLevel","addTagName","addTagList","update","remove","location","href","unsubscribe","createElement","onClick","handleQuery","bind","handleQueryMore","handleAdd","handleUpdate","handleDetele","loginOut","width","Component","getPubsub","colName","pubsub","data","JSON","stringify","isMap","isList","render","document","getElementById","Immutable","_typeof2","Symbol","iterator","_typeof","_immutable","_utils","_utils2","CollectionUtils","_Utils","apply","arguments","array","Array","isArray","List","of","doc","Map","arr","paramObj","withoutKeyObj","getKeyObj","$","isEmptyObject","error","setItem","size","_ret","nowdb","forEach","val","n","oldobj","map","v","j","set","newobj","toObject","cacheTime","Date","getTime","setLocalData","res","list","isEmpty","keyAry","String","push","nowKey","undefined","get","listObj","newObj","query","filterMapListKey","mapQuery","mapData","filter","testHaskey","k","withoutMapKeyObj","newList","rObj","filterNot","newKey","includes","_collection","_collection2","Localstorage","config","i18n","mock","collectionConfig","collectionI18n","collectionMock","parse","millis","code","message","entity","oldurl","isClear","olddb","match","_projectConf","_projectConf2","getUrl","param","returnChain","return","projectInfoList","projectManager","projectManagerIcon","projectStatus","projectImportanceLevel","projectIcon","projectTagList","tagId","systemFlag","projectMember","members","projectManagerLoginName","projectNameForShirt","closeProjectInfoList","commonProjectInfoList","regularProjectInfoList","structure","time","storeParam","validate","fulldata","joinNum","closeNum","include","exclusive","mockUrl","primaryKey","cacheTimeOut","fields","createTime","totalPrice","_persist","_persist2","_query","_query2","_pubsubJs","_pubsubJs2","Collection","uuid","getList","callback","subscribe","pubsubKey","clearCacheData","isMock","then","publish","nowItems","rtSet","_this2","inKey","inValue","indexOf","tag","e","_this3","_this4","_this5","timeout","getCacheTimeOut","toArray","reArr","start","reverse","splice","_defineProperty","_mockConf","_mockConf2","MockUtils","tmpArr","mockStr","sp","getKeyItems","len","$chars","getRandomString","ret","attrArr","levelArr","mockLevel","level_1","valArr","getRandomlength","temp","extend","getItemValue","type","getSpecialItem","integer","parseFloat","toFixed","level","range","rand","Math","random","round","chars","maxPos","str","charAt","floor","$ints","parseInt","_len","arr1","fromCodePoint","join","level_2","level_3","end","substring","_mockUtils","_mockUtils2","Persist","oper","col","op","url","mockFields","getStoreParam","getPrimaryKey","isMockUrl","hasOwnProperty","getObjLength","mockUUID","createMockContent","count","en","getParamValue","chain","newdb","d","cArr","split","one","isInsert","getJSON","setFindOneData","getPrimaryKeyValue","getReturnChain","getNowdbData","newArr","colEntity","setFindData","getDataKey","getParamObj","setInsertData","post","setUpdateData","put","updateData","_newArr","removeData","_newArr2","initJquery","ajaxSetup","cache","ajaxSend","evt","request","settings","ajaxSuccess","event","xhr","ajaxError","exception","jQuery","each","method","isFunction","ajax","dataType","success","Query","toString","zh","int","Utils","func","pollFuns","prefix","replace","r","isObject","name","poll","setInterval","cur","delay","PubSub","React","ReactDOM"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(15);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(16);\n\t\n\tvar _collectionUtils = __webpack_require__(6);\n\t\n\tvar _collectionUtils2 = _interopRequireDefault(_collectionUtils);\n\t\n\tvar _config = __webpack_require__(4);\n\t\n\tvar _config2 = _interopRequireDefault(_config);\n\t\n\tvar _localstorage = __webpack_require__(3);\n\t\n\tvar _localstorage2 = _interopRequireDefault(_localstorage);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar App = function (_React$Component) {\n\t\t_inherits(App, _React$Component);\n\t\n\t\tfunction App(props) {\n\t\t\t_classCallCheck(this, App);\n\t\n\t\t\tvar _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));\n\t\n\t\t\t_this.state = { items: [] };\n\t\t\treturn _this;\n\t\t}\n\t\n\t\t_createClass(App, [{\n\t\t\tkey: 'handleQuery',\n\t\t\tvalue: function handleQuery() {\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.findOne({ projectId: \"8c8c8ca956e00caa0156e8be040400dc\" });\n\t\t\t\tconsole.log(this.state + \"---\");\n\t\t\t\tconsole.log(window.localStorage.getItem('db'));\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleQueryMore',\n\t\t\tvalue: function handleQueryMore() {\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.find({ searchStr: \"1\" });\n\t\n\t\t\t\tconsole.log(window.localStorage.getItem('db'));\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleAdd',\n\t\t\tvalue: function handleAdd() {\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.insert({ projectName: \"云澹澹，水悠悠\", projectNameShort: \"sjzmd\", projectCode: \"wyqkk\", projectNameSpace: \"sjzmdqkk\", projectDesc: \"\", commonFlag: \"16001\", fileListStr: { \"inFile\": [{ \"fileName\": \"item_logo_4.png\", \"fileType\": \"60100\", \"sysDefault\": \"0\" }] }, importanceLevel: \"41001\", addTagName: { \"addTagList\": [] } });\n\t\n\t\t\t\tconsole.log(window.localStorage.getItem('db'));\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleUpdate',\n\t\t\tvalue: function handleUpdate() {\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.update({ projectId: \"8c8c8ca956e00caa0156e8be040400dc\", projectName: \"云澹澹，水悠悠，一声横笛锁空楼\" });\n\t\n\t\t\t\tconsole.log(window.localStorage.getItem('db'));\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleDetele',\n\t\t\tvalue: function handleDetele() {\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.remove({ projectId: \"8c8c8ca956e00caa0156e8be040400dc\" });\n\t\n\t\t\t\tconsole.log(window.localStorage.getItem('db'));\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'loginOut',\n\t\t\tvalue: function loginOut() {\n\t\t\t\twindow.location.href = 'http://www.baidu.com';\n\t\n\t\t\t\tvar project = window.db && window.db.project;\n\t\t\t\tproject.unsubscribe('findOne');\n\t\t\t\tproject.unsubscribe('find');\n\t\t\t\tproject.unsubscribe('insert');\n\t\t\t\tproject.unsubscribe('update');\n\t\t\t\tproject.unsubscribe('remove');\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'render',\n\t\t\tvalue: function render() {\n\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\tnull,\n\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t_react2.default.createElement('input', null),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.handleQuery.bind(this) },\n\t\t\t\t\t\t\t'\\u67E5\\u8BE2'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.handleQueryMore },\n\t\t\t\t\t\t\t'\\u591A\\u4E2A\\u67E5\\u8BE2'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.handleAdd },\n\t\t\t\t\t\t\t'\\u65B0\\u5EFA'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.handleUpdate },\n\t\t\t\t\t\t\t'\\u66F4\\u6539'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.handleDetele },\n\t\t\t\t\t\t\t'\\u5220\\u9664'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t{ onClick: this.loginOut },\n\t\t\t\t\t\t\t'\\u8DF3\\u5F80\\u767E\\u5EA6'\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t_react2.default.createElement('br', null),\n\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t'table',\n\t\t\t\t\t\t\t{ width: '100%' },\n\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t'thead',\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t'tr',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t\t'th',\n\t\t\t\t\t\t\t\t\t\t{ width: '30%' },\n\t\t\t\t\t\t\t\t\t\t'\\u9879\\u76EE\\u7F16\\u53F7'\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t\t'th',\n\t\t\t\t\t\t\t\t\t\t{ width: '30%' },\n\t\t\t\t\t\t\t\t\t\t'\\u9879\\u76EE\\u540D\\u79F0'\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t\t'th',\n\t\t\t\t\t\t\t\t\t\t{ width: '20%' },\n\t\t\t\t\t\t\t\t\t\t'\\u9879\\u76EE\\u7ECF\\u7406'\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t\t'th',\n\t\t\t\t\t\t\t\t\t\t{ width: '20%' },\n\t\t\t\t\t\t\t\t\t\t'\\u9879\\u76EE\\u56FE\\u7247'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t'tbody',\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t\t\t\t'tr',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t_react2.default.createElement('td', null),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement('td', null),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement('td', null),\n\t\t\t\t\t\t\t\t\t_react2.default.createElement('td', null)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn App;\n\t}(_react2.default.Component);\n\t\n\tApp.getPubsub = function (colName, p) {\n\t\tvar local = new _localstorage2.default(_config2.default, 'en', '{\"time\": 34,\"code\": \"SUCCESS\",\"message\": \"操作成功\",\"entity\": \"\"}');\n\t\n\t\tvar project = window.db && window.db.project;\n\t\n\t\tproject.pubsub('findOne', function (key, data) {\n\t\t\tconsole.log('findOne ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + _collectionUtils2.default.isMap(data));\n\t\t\t//this.setState({items: data});\n\t\t});\n\t\n\t\tproject.pubsub('find', function (key, data) {\n\t\t\tconsole.log('find ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + _collectionUtils2.default.isList(data));\n\t\t\t//this.setState({items: data});\n\t\t});\n\t\n\t\tproject.pubsub('insert', function (key, data) {\n\t\t\tconsole.log('insert ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + _collectionUtils2.default.isMap(data));\n\t\t});\n\t\n\t\tproject.pubsub('update', function (key, data) {\n\t\t\tconsole.log('update ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + _collectionUtils2.default.isMap(data));\n\t\t});\n\t\n\t\tproject.pubsub('remove', function (key, data) {\n\t\t\tconsole.log('remove ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + _collectionUtils2.default.isMap(data));\n\t\t});\n\t}();\n\t\n\t(0, _reactDom.render)(_react2.default.createElement(App, null), document.getElementById('index-container'));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = Immutable;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t} : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t};\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(12);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t    return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\tfunction _possibleConstructorReturn(self, call) {\n\t    if (!self) {\n\t        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t}\n\t\n\tfunction _inherits(subClass, superClass) {\n\t    if (typeof superClass !== \"function\" && superClass !== null) {\n\t        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof2(superClass)));\n\t    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t}\n\t\n\t/**\r\n\t * 处理数据工具方法\r\n\t */\n\tvar CollectionUtils = function (_Utils) {\n\t    _inherits(CollectionUtils, _Utils);\n\t\n\t    function CollectionUtils() {\n\t        _classCallCheck(this, CollectionUtils);\n\t\n\t        return _possibleConstructorReturn(this, (CollectionUtils.__proto__ || Object.getPrototypeOf(CollectionUtils)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(CollectionUtils, null, [{\n\t        key: 'getList',\n\t\n\t        /**\r\n\t         * 返回一个List 对象\r\n\t         * @param  {初始化数组值}\r\n\t         * @return {[List对象]}\r\n\t         */\n\t        value: function getList(array) {\n\t            // 如果参数为数组类型\n\t            if (Array.isArray(array)) {\n\t                // 返回有初始值的List\n\t                return (0, _immutable.List)(array);\n\t            }\n\t            // 返回空值List\n\t            return _immutable.List.of();\n\t        }\n\t\n\t        /**\r\n\t         * 检查对象是否为Map类型\r\n\t         * @param  {[doc]}\r\n\t         * @return {Boolean}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isMap',\n\t        value: function isMap(doc) {\n\t            return _immutable.Map.isMap(doc);\n\t        }\n\t\n\t        /**\r\n\t         * 检查对象是否为List类型\r\n\t         * @param  {[doc]}\r\n\t         * @return {Boolean}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isList',\n\t        value: function isList(doc) {\n\t            return _immutable.List.isList(doc);\n\t        }\n\t\n\t        /**\r\n\t         * [getParamObj 获取调用接口所需参数]\r\n\t         * @param  {[doc]}\r\n\t         * @param  {[arr]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getParamObj',\n\t        value: function getParamObj(doc, arr) {\n\t            var paramObj = {};\n\t\n\t            if ((typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) == \"object\") {\n\t                if (!arr[1]) {\n\t                    if (arr[0]) {\n\t                        paramObj = CollectionUtils.getKeyObj(doc, arr[0]);\n\t                    } else {\n\t                        paramObj = doc;\n\t                    }\n\t                } else {\n\t                    paramObj = CollectionUtils.withoutKeyObj(doc, arr[0]);\n\t                }\n\t            } else if (typeof doc == \"string\") {\n\t                paramObj = doc;\n\t            } else {\n\t                return false;\n\t            }\n\t\n\t            if (!paramObj || $.isEmptyObject(paramObj)) {\n\t                console.error('参数为空');\n\t                return false;\n\t            }\n\t\n\t            return paramObj;\n\t        }\n\t\n\t        /**\r\n\t         * [setLocalData 更新数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} data [插入数据]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setLocalData',\n\t        value: function setLocalData(colName, data) {\n\t            window.db[colName].items = data;\n\t            window.localStorage.setItem('db', JSON.stringify(window.db));\n\t        }\n\t\n\t        /**\r\n\t         * [updateData 更新操作后更新数据]\r\n\t         * @param  {[data]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'updateData',\n\t        value: function updateData(colName, data, key) {\n\t            var db = window.db && window.db[colName].items;\n\t\n\t            if (db && db.size > 0) {\n\t                var _ret = function () {\n\t                    var nowdb = (0, _immutable.List)();\n\t                    var update = (0, _immutable.List)();\n\t\n\t                    db.forEach(function (val, i) {\n\t                        if (val[key] == data[key]) {\n\t                            var n;\n\t\n\t                            (function () {\n\t                                var oldobj = (0, _immutable.Map)(val);\n\t\n\t                                for (n in data) {\n\t                                    oldobj.map(function (v, j) {\n\t                                        if (j == n) {\n\t                                            update = oldobj.set(n, data[n]);\n\t                                        }\n\t                                    });\n\t                                }\n\t\n\t                                var newobj = update.toObject();\n\t                                newobj.cacheTime = new Date().getTime();\n\t                                nowdb = db.set(i, newobj);\n\t                            })();\n\t                        }\n\t                    });\n\t\n\t                    if (nowdb && nowdb.size > 0) {\n\t                        CollectionUtils.setLocalData(colName, nowdb);\n\t                    } else {\n\t                        console.error('更改的数据不存在！');\n\t                    }\n\t\n\t                    return {\n\t                        v: update.toObject()\n\t                    };\n\t                }();\n\t\n\t                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t            } else {\n\t                console.error('更改的数据不存在！');\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [removeData 更新操作后更新数据]\r\n\t         * @param  {[data]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeData',\n\t        value: function removeData(colName, data, key) {\n\t            var db = window.db && window.db[colName].items;\n\t\n\t            if (db && db.size > 0) {\n\t                var nowdb = (0, _immutable.List)();\n\t                var remove = false;\n\t                var res = void 0;\n\t\n\t                db.forEach(function (val, i) {\n\t                    if (val[key] == data) {\n\t                        remove = true;\n\t                        nowdb = db.remove(i);\n\t                        res = val;\n\t                    }\n\t                });\n\t\n\t                if (remove) {\n\t                    CollectionUtils.setLocalData(colName, nowdb);\n\t                } else {\n\t                    console.error('删除的数据不存在！');\n\t                }\n\t\n\t                return res;\n\t            } else {\n\t                console.error('删除的数据不存在！');\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * 获取对象数据\r\n\t         * @param  {immutable对象||普通对象||普通数组} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'getKeyObj',\n\t        value: function getKeyObj(list, key) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n\t            var obj = {};\n\t            var keyAry = [];\n\t            if (key.constructor == String) {\n\t                keyAry.push(key);\n\t            } else if (key.constructor == Array) {\n\t                keyAry = key;\n\t            }\n\t\n\t            for (var i = 0; i < keyAry.length; i++) {\n\t                var nowKey = keyAry[i];\n\t                if (_immutable.Map.isMap(list)) {\n\t                    if (list.get(nowKey) != undefined) obj[nowKey] = list.get(nowKey);\n\t                } else if (list.constructor == Object) {\n\t                    if (list[nowKey] != undefined) obj[nowKey] = list[nowKey];\n\t                } else if (list.constructor == Array) {\n\t                    if (list[0][nowKey] != undefined) obj[nowKey] = list[0][nowKey];\n\t                }\n\t            };\n\t\n\t            return obj;\n\t        }\n\t\n\t        /**\r\n\t         * 获取对象列表数据\r\n\t         * @param  {普通数组} list 总列表数据\r\n\t         * @param  {字符串，普通数组} key  关键词\r\n\t         * @return {普通数组}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'getListKeyObj',\n\t        value: function getListKeyObj(list, key) {\n\t            if (!list || !key) return;\n\t            var listObj = [];\n\t            for (var i = 0; i < list.length; i++) {\n\t                var newObj = this.getKeyObj(list[i], key);\n\t                if (!CollectionUtils.isEmpty(newObj)) listObj.push(newObj);\n\t            };\n\t            return listObj;\n\t        }\n\t\n\t        /**\r\n\t         * 筛选符合查询条件的数组\r\n\t         * @param  {immutable数组||普通数组} list  被筛选数组\r\n\t         * @param  {普通对象} query 筛选对象\r\n\t         * @return {普通数组}       筛选出的数组\r\n\t         */\n\t\n\t    }, {\n\t        key: 'filterListKey',\n\t        value: function filterListKey(list, query) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !query) return;\n\t            var result;\n\t            if (_immutable.List.isList(list)) {\n\t                return this.filterMapListKey(list, query);\n\t            } else if (list.constructor == Array) {\n\t                return this.filterMapListKey((0, _immutable.List)(list), query);\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * 筛选符合查询条件的immutable数组\r\n\t         * @param  {immutable数组} list  被筛选数组\r\n\t         * @param  {普通对象} query 筛选对象\r\n\t         * @return {普通数组}       筛选出的数组\r\n\t         */\n\t\n\t    }, {\n\t        key: 'filterMapListKey',\n\t        value: function filterMapListKey(list, query) {\n\t\n\t            if (!list || !query || !_immutable.List.isList(list)) return;\n\t\n\t            var mapQuery = (0, _immutable.Map)(query);\n\t            var mapData = list.filter(function (obj) {\n\t                var testHaskey = true;\n\t                mapQuery.map(function (val, k) {\n\t                    if (val != (0, _immutable.Map)(obj).get(k)) {\n\t                        testHaskey = false;\n\t                    }\n\t                });\n\t                return testHaskey;\n\t            });\n\t            return mapData;\n\t        }\n\t\n\t        /**\r\n\t         * 排除key值的对象数据\r\n\t         * @param  {immutable对象||普通对象} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'withoutKeyObj',\n\t        value: function withoutKeyObj(list, key) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n\t            var obj;\n\t            if (_immutable.Map.isMap(list)) {\n\t                obj = this.withoutMapKeyObj(list, key);\n\t            } else if (list.constructor == Object) {\n\t                var newList = (0, _immutable.Map)(list);\n\t                obj = this.withoutMapKeyObj(newList, key);\n\t            } else if (list.constructor == Array) {\n\t                obj = [];\n\t                for (var i = 0; i < list.length; i++) {\n\t                    var rObj = this.withoutMapKeyObj((0, _immutable.Map)(list[i]), key);\n\t                    obj.push(rObj);\n\t                };\n\t            }\n\t\n\t            return obj;\n\t        }\n\t\n\t        /**\r\n\t         * 排除key值的immutable数组\r\n\t         * @param  {immutable对象} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'withoutMapKeyObj',\n\t        value: function withoutMapKeyObj(list, key) {\n\t\n\t            if (!list || !key || !_immutable.Map.isMap(list)) return;\n\t            var newList;\n\t            if (key.constructor == String) {\n\t                newList = list.filterNot(function (val, k) {\n\t                    return key == k;\n\t                });\n\t            } else if (key.constructor == Array) {\n\t                var newKey = (0, _immutable.List)(key);\n\t                newList = list.filterNot(function (val, k) {\n\t                    return newKey.includes(k);\n\t                });\n\t            }\n\t\n\t            return newList.toObject();\n\t        }\n\t    }]);\n\t\n\t    return CollectionUtils;\n\t}(_utils2.default);\n\t\n\texports.default = CollectionUtils;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t} : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t};\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _collection = __webpack_require__(7);\n\t\n\tvar _collection2 = _interopRequireDefault(_collection);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t    return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\tvar Localstorage = function () {\n\t\n\t    /**\r\n\t     * [constructor 数据存储构造函数]\r\n\t     * @param  {[type]} colName [集合名称]\r\n\t     * @param  {[type]} list    [初始化列表数据]\r\n\t     * @return {[type]}         [description]\r\n\t     */\n\t    function Localstorage(config, i18n, mock) {\n\t        _classCallCheck(this, Localstorage);\n\t\n\t        // 传入配置有误情况\n\t        if (!config || (typeof config === 'undefined' ? 'undefined' : _typeof(config)) != 'object') {\n\t            console.error('没有配置或者配置错误');\n\t            return;\n\t        }\n\t\n\t        // 设置配置\n\t        window.collectionConfig = config;\n\t        // 设置集合国际化\n\t        window.collectionI18n = i18n || 'en';\n\t        // 设置默认JSON\n\t        if (typeof mock == 'string') {\n\t            window.collectionMock = JSON.parse(mock);\n\t        } else {\n\t            window.collectionMock = mock || { 'millis': 34, 'code': 'SUCCESS', 'message': '操作成功', 'entity': '' };\n\t        }\n\t\n\t        var oldurl = window.localStorage.getItem('oldUrl') || '';\n\t        var isClear = false;\n\t\n\t        if (oldurl.includes('mock') != location.href.includes('mock')) {\n\t            isClear = true;\n\t            window.localStorage.setItem('oldUrl', location.href);\n\t        }\n\t\n\t        if (isClear) {\n\t            window.localStorage.setItem('db', '{}');\n\t        }\n\t\n\t        window.db = {};\n\t        var olddb = window.localStorage.getItem('db') || '{}';\n\t        olddb = JSON.parse(olddb);\n\t\n\t        for (var i in config) {\n\t            var match = false;\n\t            for (var k in olddb) {\n\t                if (k === i) {\n\t                    match = true;\n\t                }\n\t            }\n\t\n\t            var list = [];\n\t            if (match) {\n\t                list = olddb[i].items;\n\t            }\n\t            window.db[i] = new _collection2.default(i, list);\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * [setCollectionI18n 设置集合国际化]\r\n\t     * @param  {[type]} i18n [国际化]\r\n\t     * @return {[type]}         [description]\r\n\t     */\n\t\n\t    _createClass(Localstorage, [{\n\t        key: 'setCollectionI18n',\n\t        value: function setCollectionI18n(i18n) {\n\t            // 设置集合国际化\n\t            window.collectionI18n = i18n || 'en';\n\t        }\n\t    }]);\n\t\n\t    return Localstorage;\n\t}();\n\t\n\texports.default = Localstorage;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _projectConf = __webpack_require__(5);\n\t\n\tvar _projectConf2 = _interopRequireDefault(_projectConf);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  \"project\": _projectConf2.default\n\t}; /**\r\n\t    * 集合操作相关配置\r\n\t    */\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\r\n\t * 项目实体配置\r\n\t */\n\texports.default = {\n\t    //查询一个\n\t    \"findOne\": {\n\t        // 查询详情，获取Url\n\t        getUrl: function getUrl(param) {\n\t            return \"/v2/project/\" + param;\n\t        },\n\t        //返回链\n\t        \"returnChain\": \"entity.projectInfoList\",\n\t        // 查询详情，mock数据结构\n\t        \"return\": {\n\t            \"projectInfoList\": [{\n\t                \"projectId\": \"8c8c8ca956e00caa0156e8be040400dd\",\n\t                \"projectName\": \"来，跟我一起说：耶~\",\n\t                \"projectManager\": \"沈佳芳2233\",\n\t                \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\",\n\t                \"projectStatus\": \"14001\",\n\t                \"projectImportanceLevel\": \"41001\",\n\t                \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\",\n\t                \"projectTagList\": [{ \"tagId\": \"wherwjfpwp1\", \"systemFlag\": \"12\" }],\n\t                \"projectMember\": ['int'],\n\t                \"members\": 1,\n\t                \"projectManagerLoginName\": \"shenjiafang\",\n\t                \"projectNameSpace\": \"sjzmdqkk\",\n\t                \"projectNameForShirt\": \"sjzmd\",\n\t                \"projectCode\": \"wyqkk\",\n\t                \"commonFlag\": \"16001\"\n\t            }],\n\t            \"closeProjectInfoList\": [],\n\t            \"commonProjectInfoList\": null,\n\t            \"regularProjectInfoList\": null\n\t        },\n\t        /*//mock数据路径\r\n\t        \"mockUrl\": \"mock/findOne.json\",*/\n\t        // mock数据结构\n\t        \"structure\": {\n\t            \"time\": 64,\n\t            \"code\": \"SUCCESS\",\n\t            \"message\": \"操作成功\",\n\t            \"entity\": ''\n\t        },\n\t        // 数据存放字段\n\t        \"storeParam\": \"entity\"\n\t    },\n\t    //查询多个\n\t    \"find\": {\n\t        // 查询集合，获取Url\n\t        getUrl: function getUrl() {\n\t            return \"v2/project/projectPage\";\n\t        },\n\t        //返回链\n\t        \"returnChain\": \"entity.projectInfoList\",\n\t        // 缓存有效期 1分钟\n\t        \"validate\": 60 * 1000,\n\t        // 数据完整性\n\t        \"fulldata\": true,\n\t        // 查询集合，mock数据结构\n\t        \"return\": {\n\t            \"joinNum\": \"\",\n\t            \"closeNum\": \"\",\n\t            \"closeProjectInfoList\": [{\n\t                \"projectId\": \"\",\n\t                \"projectImportanceLevel\": \"\",\n\t                \"commonFlag\": \"\",\n\t                \"members\": \"\",\n\t                \"projectCode\": \"\",\n\t                \"projectIcon\": \"\",\n\t                \"projectManager\": \"\",\n\t                \"projectManagerIcon\": \"\",\n\t                \"projectManagerLoginName\": \"\",\n\t                \"projectName\": \"\",\n\t                \"projectNameForShirt\": \"\",\n\t                \"projectNameSpace\": \"\",\n\t                \"projectStatus\": \"\",\n\t                \"projectTagList\": \"\"\n\t            }],\n\t            \"projectInfoList\": [{\n\t                \"projectId\": \"\",\n\t                \"projectImportanceLevel\": \"\",\n\t                \"commonFlag\": \"\",\n\t                \"members\": \"\",\n\t                \"projectCode\": \"\",\n\t                \"projectIcon\": \"\",\n\t                \"projectManager\": \"\",\n\t                \"projectManagerIcon\": \"\",\n\t                \"projectManagerLoginName\": \"\",\n\t                \"projectName\": \"\",\n\t                \"projectNameForShirt\": \"\",\n\t                \"projectNameSpace\": \"\",\n\t                \"projectStatus\": \"\",\n\t                \"projectTagList\": \"\"\n\t            }]\n\t        },\n\t        /*//mock数据路径\r\n\t        \"mockUrl\": \"mock/find.json\",*/\n\t        // mock数据结构\n\t        \"structure\": {\n\t            \"time\": 64,\n\t            \"code\": \"SUCCESS\",\n\t            \"message\": \"操作成功\",\n\t            \"entity\": ''\n\t        },\n\t        // 生成的mock数据存放字段\n\t        \"storeParam\": \"entity\"\n\t    },\n\t    //新增\n\t    \"insert\": {\n\t        //包含的参数，只要有include，持续层就会调用\n\t        \"include\": [\"projectName\", \"projectNameShort\", \"projectCode\", \"projectNameSpace\", \"fileListStr\", \"importanceLevel\"],\n\t        //不包含的参数，可有可无，只有在include不存在时才会执行\n\t        \"exclusive\": [\"projectId\", \"projectName\"],\n\t        getUrl: function getUrl(param) {\n\t            return \"v2/project\";\n\t        },\n\t        // 查询详情，mock数据结构\n\t        \"return\": {\n\t            // 可直接规定长度，也可给值，按值的长度随机生成\n\t            \"projectId\": 32\n\t        }\n\t        /*//mock数据路径\r\n\t        \"mockUrl\": \"mock/insert.json\"*/\n\t    },\n\t    //修改\n\t    \"update\": {\n\t        //包含的参数，只要有include，持续层就会调用\n\t        \"include\": [\"projectId\", \"projectName\"],\n\t        //不包含的参数，可有可无，只有在include不存在时才会执行\n\t        \"exclusive\": [\"projectId\", \"projectName\"],\n\t        getUrl: function getUrl(param) {\n\t            return \"v2/project/\" + param;\n\t        },\n\t        //mock数据路径\n\t        \"mockUrl\": \"mock/success.json\"\n\t    },\n\t    //删除\n\t    \"remove\": {\n\t        getUrl: function getUrl(param) {\n\t            return \"/v2/project/\" + param;\n\t        } /*,\r\n\t          //mock数据路径\r\n\t          \"mockUrl\": \"mock/success.json\"*/\n\t    },\n\t    // 实体相关配置\n\t    \"entity\": {\n\t        // 实体主键\n\t        \"primaryKey\": \"projectId\",\n\t        // 过期\n\t        \"cacheTimeOut\": 5184000,\n\t        // 实体字段配置，根据mock级别 + 数据类型 = mock属性长度\n\t        \"fields\": {\n\t            \"projectId\": \"string\",\n\t            \"projectName\": \"string\",\n\t            \"projectManager\": \"string\",\n\t            \"projectManagerIcon\": \"string\",\n\t            \"projectStatus\": \"string\",\n\t            \"projectImportanceLevel\": \"string\",\n\t            \"projectIcon\": \"string\",\n\t            \"members\": \"int\",\n\t            \"projectManagerLoginName\": \"string\",\n\t            \"projectNameSpace\": \"string\",\n\t            \"projectNameForShirt\": \"string\",\n\t            \"projectCode\": \"string\",\n\t            \"commonFlag\": \"string\",\n\t            \"createTime\": \"time\",\n\t            \"totalPrice\": \"money\",\n\t            \"tagId\": \"string\",\n\t            \"systemFlag\": \"int\"\n\t        }\n\t    }\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(13);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\r\n\t * 处理数据工具方法\r\n\t */\n\tvar CollectionUtils = function (_Utils) {\n\t    _inherits(CollectionUtils, _Utils);\n\t\n\t    function CollectionUtils() {\n\t        _classCallCheck(this, CollectionUtils);\n\t\n\t        return _possibleConstructorReturn(this, (CollectionUtils.__proto__ || Object.getPrototypeOf(CollectionUtils)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(CollectionUtils, null, [{\n\t        key: 'getList',\n\t\n\t\n\t        /**\r\n\t         * 返回一个List 对象\r\n\t         * @param  {初始化数组值}\r\n\t         * @return {[List对象]}\r\n\t         */\n\t        value: function getList(array) {\n\t            // 如果参数为数组类型\n\t            if (Array.isArray(array)) {\n\t                // 返回有初始值的List\n\t                return (0, _immutable.List)(array);\n\t            }\n\t            // 返回空值List\n\t            return _immutable.List.of();\n\t        }\n\t\n\t        /**\r\n\t         * 检查对象是否为Map类型\r\n\t         * @param  {[doc]}\r\n\t         * @return {Boolean}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isMap',\n\t        value: function isMap(doc) {\n\t            return _immutable.Map.isMap(doc);\n\t        }\n\t\n\t        /**\r\n\t         * 检查对象是否为List类型\r\n\t         * @param  {[doc]}\r\n\t         * @return {Boolean}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isList',\n\t        value: function isList(doc) {\n\t            return _immutable.List.isList(doc);\n\t        }\n\t\n\t        /**\r\n\t         * [getParamObj 获取调用接口所需参数]\r\n\t         * @param  {[doc]}\r\n\t         * @param  {[arr]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getParamObj',\n\t        value: function getParamObj(doc, arr) {\n\t            var paramObj = {};\n\t\n\t            if ((typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) == \"object\") {\n\t                if (!arr[1]) {\n\t                    if (arr[0]) {\n\t                        paramObj = CollectionUtils.getKeyObj(doc, arr[0]);\n\t                    } else {\n\t                        paramObj = doc;\n\t                    }\n\t                } else {\n\t                    paramObj = CollectionUtils.withoutKeyObj(doc, arr[0]);\n\t                }\n\t            } else if (typeof doc == \"string\") {\n\t                paramObj = doc;\n\t            } else {\n\t                return false;\n\t            }\n\t\n\t            if (!paramObj || $.isEmptyObject(paramObj)) {\n\t                console.error('参数为空');\n\t                return false;\n\t            }\n\t\n\t            return paramObj;\n\t        }\n\t\n\t        /**\r\n\t         * [setLocalData 更新数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} data [插入数据]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setLocalData',\n\t        value: function setLocalData(colName, data) {\n\t            window.db[colName].items = data;\n\t            window.localStorage.setItem('db', JSON.stringify(window.db));\n\t        }\n\t\n\t        /**\r\n\t         * [updateData 更新操作后更新数据]\r\n\t         * @param  {[data]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'updateData',\n\t        value: function updateData(colName, data, key) {\n\t            var db = window.db && window.db[colName].items;\n\t\n\t            if (db && db.size > 0) {\n\t                var _ret = function () {\n\t                    var nowdb = (0, _immutable.List)();\n\t                    var update = (0, _immutable.List)();\n\t\n\t                    db.forEach(function (val, i) {\n\t                        if (val[key] == data[key]) {\n\t                            var n;\n\t\n\t                            (function () {\n\t                                var oldobj = (0, _immutable.Map)(val);\n\t\n\t                                for (n in data) {\n\t                                    oldobj.map(function (v, j) {\n\t                                        if (j == n) {\n\t                                            update = oldobj.set(n, data[n]);\n\t                                        }\n\t                                    });\n\t                                }\n\t\n\t                                var newobj = update.toObject();\n\t                                newobj.cacheTime = new Date().getTime();\n\t                                nowdb = db.set(i, newobj);\n\t                            })();\n\t                        }\n\t                    });\n\t\n\t                    if (nowdb && nowdb.size > 0) {\n\t                        CollectionUtils.setLocalData(colName, nowdb);\n\t                    } else {\n\t                        console.error('更改的数据不存在！');\n\t                    }\n\t\n\t                    return {\n\t                        v: update.toObject()\n\t                    };\n\t                }();\n\t\n\t                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t            } else {\n\t                console.error('更改的数据不存在！');\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [removeData 更新操作后更新数据]\r\n\t         * @param  {[data]}\r\n\t         * @return {普通对象}\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeData',\n\t        value: function removeData(colName, data, key) {\n\t            var db = window.db && window.db[colName].items;\n\t\n\t            if (db && db.size > 0) {\n\t                var nowdb = (0, _immutable.List)();\n\t                var remove = false;\n\t                var res = void 0;\n\t\n\t                db.forEach(function (val, i) {\n\t                    if (val[key] == data) {\n\t                        remove = true;\n\t                        nowdb = db.remove(i);\n\t                        res = val;\n\t                    }\n\t                });\n\t\n\t                if (remove) {\n\t                    CollectionUtils.setLocalData(colName, nowdb);\n\t                } else {\n\t                    console.error('删除的数据不存在！');\n\t                }\n\t\n\t                return res;\n\t            } else {\n\t                console.error('删除的数据不存在！');\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * 获取对象数据\r\n\t         * @param  {immutable对象||普通对象||普通数组} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'getKeyObj',\n\t        value: function getKeyObj(list, key) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n\t            var obj = {};\n\t            var keyAry = [];\n\t            if (key.constructor == String) {\n\t                keyAry.push(key);\n\t            } else if (key.constructor == Array) {\n\t                keyAry = key;\n\t            }\n\t\n\t            for (var i = 0; i < keyAry.length; i++) {\n\t                var nowKey = keyAry[i];\n\t                if (_immutable.Map.isMap(list)) {\n\t                    if (list.get(nowKey) != undefined) obj[nowKey] = list.get(nowKey);\n\t                } else if (list.constructor == Object) {\n\t                    if (list[nowKey] != undefined) obj[nowKey] = list[nowKey];\n\t                } else if (list.constructor == Array) {\n\t                    if (list[0][nowKey] != undefined) obj[nowKey] = list[0][nowKey];\n\t                }\n\t            };\n\t\n\t            return obj;\n\t        }\n\t\n\t        /**\r\n\t         * 获取对象列表数据\r\n\t         * @param  {普通数组} list 总列表数据\r\n\t         * @param  {字符串，普通数组} key  关键词\r\n\t         * @return {普通数组}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'getListKeyObj',\n\t        value: function getListKeyObj(list, key) {\n\t            if (!list || !key) return;\n\t            var listObj = [];\n\t            for (var i = 0; i < list.length; i++) {\n\t                var newObj = this.getKeyObj(list[i], key);\n\t                if (!CollectionUtils.isEmpty(newObj)) listObj.push(newObj);\n\t            };\n\t            return listObj;\n\t        }\n\t\n\t        /**\r\n\t         * 筛选符合查询条件的数组\r\n\t         * @param  {immutable数组||普通数组} list  被筛选数组\r\n\t         * @param  {普通对象} query 筛选对象\r\n\t         * @return {普通数组}       筛选出的数组\r\n\t         */\n\t\n\t    }, {\n\t        key: 'filterListKey',\n\t        value: function filterListKey(list, query) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !query) return;\n\t            var result;\n\t            if (_immutable.List.isList(list)) {\n\t                return this.filterMapListKey(list, query);\n\t            } else if (list.constructor == Array) {\n\t                return this.filterMapListKey((0, _immutable.List)(list), query);\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * 筛选符合查询条件的immutable数组\r\n\t         * @param  {immutable数组} list  被筛选数组\r\n\t         * @param  {普通对象} query 筛选对象\r\n\t         * @return {普通数组}       筛选出的数组\r\n\t         */\n\t\n\t    }, {\n\t        key: 'filterMapListKey',\n\t        value: function filterMapListKey(list, query) {\n\t\n\t            if (!list || !query || !_immutable.List.isList(list)) return;\n\t\n\t            var mapQuery = (0, _immutable.Map)(query);\n\t            var mapData = list.filter(function (obj) {\n\t                var testHaskey = true;\n\t                mapQuery.map(function (val, k) {\n\t                    if (val != (0, _immutable.Map)(obj).get(k)) {\n\t                        testHaskey = false;\n\t                    }\n\t                });\n\t                return testHaskey;\n\t            });\n\t            return mapData;\n\t        }\n\t\n\t        /**\r\n\t         * 排除key值的对象数据\r\n\t         * @param  {immutable对象||普通对象} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'withoutKeyObj',\n\t        value: function withoutKeyObj(list, key) {\n\t\n\t            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n\t            var obj;\n\t            if (_immutable.Map.isMap(list)) {\n\t                obj = this.withoutMapKeyObj(list, key);\n\t            } else if (list.constructor == Object) {\n\t                var newList = (0, _immutable.Map)(list);\n\t                obj = this.withoutMapKeyObj(newList, key);\n\t            } else if (list.constructor == Array) {\n\t                obj = [];\n\t                for (var i = 0; i < list.length; i++) {\n\t                    var rObj = this.withoutMapKeyObj((0, _immutable.Map)(list[i]), key);\n\t                    obj.push(rObj);\n\t                };\n\t            }\n\t\n\t            return obj;\n\t        }\n\t\n\t        /**\r\n\t         * 排除key值的immutable数组\r\n\t         * @param  {immutable对象} list 集合名称\r\n\t         * @param  {字符串||普通数组} key  关键词\r\n\t         * @return {普通对象}      \r\n\t         */\n\t\n\t    }, {\n\t        key: 'withoutMapKeyObj',\n\t        value: function withoutMapKeyObj(list, key) {\n\t\n\t            if (!list || !key || !_immutable.Map.isMap(list)) return;\n\t            var newList;\n\t            if (key.constructor == String) {\n\t                newList = list.filterNot(function (val, k) {\n\t                    return key == k;\n\t                });\n\t            } else if (key.constructor == Array) {\n\t                var newKey = (0, _immutable.List)(key);\n\t                newList = list.filterNot(function (val, k) {\n\t                    return newKey.includes(k);\n\t                });\n\t            }\n\t\n\t            return newList.toObject();\n\t        }\n\t    }]);\n\t\n\t    return CollectionUtils;\n\t}(_utils2.default);\n\t\n\texports.default = CollectionUtils;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t} : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t};\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _persist = __webpack_require__(9);\n\t\n\tvar _persist2 = _interopRequireDefault(_persist);\n\t\n\tvar _collectionUtils = __webpack_require__(2);\n\t\n\tvar _collectionUtils2 = _interopRequireDefault(_collectionUtils);\n\t\n\tvar _query = __webpack_require__(10);\n\t\n\tvar _query2 = _interopRequireDefault(_query);\n\t\n\tvar _pubsubJs = __webpack_require__(14);\n\t\n\tvar _pubsubJs2 = _interopRequireDefault(_pubsubJs);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t    return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\tvar Collection = function () {\n\t\n\t    /**\r\n\t     * [constructor 集合操作构造函数]\r\n\t     * @param  {[type]} colName [集合名称]\r\n\t     * @param  {[type]} list    [初始化列表数据]\r\n\t     * @return {[type]}         [description]\r\n\t     */\n\t    function Collection(colName, list) {\n\t        _classCallCheck(this, Collection);\n\t\n\t        // 设置集合id\n\t        this.id = _collectionUtils2.default.uuid();\n\t        // 设置集合名称\n\t        this.colName = colName;\n\t        // 初始化参数为集合\n\t        this.items = _collectionUtils2.default.getList(list);\n\t    }\n\t\n\t    /**\r\n\t     * [pubsub 集合变更，事件订阅]\r\n\t     * @param  {Function} callback [集合变更，回调执行函数]\r\n\t     * @return {[type]}            [description]\r\n\t     */\n\t\n\t    _createClass(Collection, [{\n\t        key: 'pubsub',\n\t        value: function pubsub(p, callback) {\n\t            // 订阅指定集合的事件\n\t            _pubsubJs2.default.subscribe(this.pubsubKey(p), callback);\n\t        }\n\t\n\t        /**\r\n\t         * [unsubscribe 取消事件订阅]\r\n\t         * @param  {[type]} p [集合操作]\r\n\t         * @return {[type]}            [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'unsubscribe',\n\t        value: function unsubscribe(p) {\n\t            // 取消订阅指定集合的事件\n\t            _pubsubJs2.default.unsubscribe(this.pubsubKey(p));\n\t        }\n\t\n\t        /**\r\n\t         * [pubsubKey 生成订阅事件key]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'pubsubKey',\n\t        value: function pubsubKey(p) {\n\t            return 'collection.' + this.colName + '.' + p + '.' + this.id;\n\t        }\n\t\n\t        /**\r\n\t         * [clearCacheData 清除缓存数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p [操作]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'findOne',\n\t\n\t        /**\r\n\t         * [findOne 查询数据详情]\r\n\t         * @param  {[type]} doc [查询对象 或 数据编号]\r\n\t         * @return {[type]}     [description]\r\n\t         */\n\t        value: function findOne(doc) {\n\t            var _this = this;\n\t\n\t            // 清缓存\n\t            Collection.clearCacheData(this.colName, 'findOne');\n\t\n\t            // 调用持久化对象 查询 数据详情\n\t            if (_persist2.default.isMock) {\n\t                // mock数据\n\t                var mock = _persist2.default.findOne(this.colName, doc);\n\t                if (mock) {\n\t                    if (typeof mock.then === 'function') {\n\t                        return mock.then(function (data) {\n\t                            // 集合变更，发布事件\n\t                            _pubsubJs2.default.publish(_this.pubsubKey('findOne'), data.nowItems);\n\t                        }.bind(this));\n\t                    } else {\n\t                        // 集合变更发布事件\n\t                        _pubsubJs2.default.publish(this.pubsubKey('findOne'), mock.nowItems);\n\t                    }\n\t                }\n\t            } else {\n\t                return _persist2.default.findOne(this.colName, doc).then(function (data) {\n\t                    // 集合变更发布事件\n\t                    _pubsubJs2.default.publish(_this.pubsubKey('findOne'), data.nowItems);\n\t                }.bind(this));\n\t            }\n\t\n\t            /*// 模仿数据\r\n\t            let data = Persist.findOne(this.colName, doc);\r\n\t            PubSub.publish(this.pubsubKey('findOne'), data.nowItems);*/\n\t        }\n\t\n\t        /**\r\n\t         * [find 根据查询器，查询集合]\r\n\t         * @param  {[type]} doc   [查询器]\r\n\t         * @param  {[type]} rtSet [返回指定键]\r\n\t         * @return {[type]}       [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(doc, rtSet) {\n\t            var _this2 = this;\n\t\n\t            // 不符合查询规则\n\t            if (!doc || !(typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) == \"object\") return false;\n\t\n\t            // 初始化请求数据\n\t            var query = {};\n\t\n\t            // 如果传入数据为 object 类型\n\t            for (var key in doc) {\n\t                var value = doc[key];\n\t                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) != \"object\") {\n\t                    // 等值搜索\n\t                    query[key] = value;\n\t                } else {\n\t                    // 条件搜索\n\t                    for (var inKey in value) {\n\t                        // 查询器的值\n\t                        var inValue = value[inKey];\n\t                        if (inKey.indexOf(\"$\") == 0) {\n\t                            // 搜索查询器\n\t                            var tag = inKey;\n\t\n\t                            // 按照 查询器 解析 查询条件\n\t                            try {\n\t                                var v = _query2.default[tag](inValue);\n\t                                if (v) {\n\t                                    query[key] = v;\n\t                                } else {\n\t                                    return false;\n\t                                }\n\t                            } catch (e) {\n\t                                // 查询器暂不支持;\n\t                                return false;\n\t                            }\n\t                        } else {\n\t                            // 条件搜搜的查询器不是以 $ 开头\n\t                            return false;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // 清缓存\n\t            Collection.clearCacheData(this.colName, 'find');\n\t\n\t            // 调用持久化对象 查询 数据详情\n\t            if (_persist2.default.isMock) {\n\t                // mock数据\n\t                var mock = _persist2.default.find(this.colName, doc);\n\t                if (mock) {\n\t                    if (typeof mock.then === 'function') {\n\t                        return mock.then(function (data) {\n\t                            // 集合变更，发布事件\n\t                            _pubsubJs2.default.publish(_this2.pubsubKey('find'), data.nowItems);\n\t                        }.bind(this));\n\t                    } else {\n\t                        // 集合变更发布事件\n\t                        _pubsubJs2.default.publish(this.pubsubKey('find'), mock.nowItems);\n\t                    }\n\t                }\n\t            } else {\n\t                // 调用持久化对象 查询 数据详情\n\t                return _persist2.default.find(this.colName, query, this).then(function (data) {\n\t                    // 集合变更发布事件\n\t                    _pubsubJs2.default.publish(_this2.pubsubKey('find'), data.nowItems);\n\t\n\t                    // if (Array.isArray(res)) { // 从缓存获取数据\n\t                    //         // 向集合放入新数据\n\t                    //         this.items = res;\n\t                    //     } else { // 从接口获得的数据\n\t                    //         // 向集合放入新数据\n\t                    //         this.items.push(res.data);\n\t                    //         // 设置过期时间\n\t                    //         if (res.timeout) {\n\t                    //             this.timeout = res.timeout;\n\t                    //         }\n\t                    //     }\n\t                    // }).bind(this)).catch(((error) => {\n\t                    //     // console.log(error)\n\t                }.bind(this));\n\t            }\n\t\n\t            /*// 模仿数据\r\n\t            let data = Persist.find(this.colName, doc);\r\n\t            PubSub.publish(this.pubsubKey('find'), data.nowItems);*/\n\t        }\n\t\n\t        /**\r\n\t         * [insert 向集合插入单条数据]\r\n\t         * @param  {[type]} doc [单条数据]\r\n\t         * @return {[type]}      [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'insert',\n\t        value: function insert(doc) {\n\t            var _this3 = this;\n\t\n\t            // 清缓存\n\t            Collection.clearCacheData(this.colName, 'insert');\n\t            // 调用持久化对象 查询 数据详情\n\t            if (_persist2.default.isMock) {\n\t                // mock\n\t                var mock = _persist2.default.insert(this.colName, doc);\n\t                if (mock) {\n\t                    if (typeof mock.then === 'function') {\n\t                        return mock.then(function (data) {\n\t                            // 集合变更，发布事件\n\t                            _pubsubJs2.default.publish(_this3.pubsubKey('insert'), data.nowItems);\n\t                        }.bind(this));\n\t                    } else {\n\t                        // 集合变更，发布事件\n\t                        _pubsubJs2.default.publish(this.pubsubKey('insert'), mock.nowItems);\n\t                    }\n\t                }\n\t            } else {\n\t                return _persist2.default.insert(this.colName, doc).then(function (data) {\n\t                    // 集合变更发布事件\n\t                    _pubsubJs2.default.publish(_this3.pubsubKey('insert'), data.nowItems);\n\t                }.bind(this));\n\t            }\n\t\n\t            /*// 模仿数据\r\n\t            let data = Persist.insert(this.colName, doc);\r\n\t            PubSub.publish(this.pubsubKey('insert'), data.nowItems);*/\n\t        }\n\t\n\t        /**\r\n\t         * [update 更新集合中单条数据]\r\n\t         * @param  {[type]} doc [单条数据]\r\n\t         * @return {[type]}     [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'update',\n\t        value: function update(doc) {\n\t            var _this4 = this;\n\t\n\t            // 清缓存\n\t            Collection.clearCacheData(this.colName, 'update');\n\t            // 调用持久对象，更新单条数据\n\t            if (_persist2.default.isMock) {\n\t                // mock\n\t                var mock = _persist2.default.update(this.colName, doc);\n\t                if (mock) {\n\t                    if (typeof mock.then === 'function') {\n\t                        return mock.then(function (data) {\n\t                            // 集合变更，发布事件\n\t                            _pubsubJs2.default.publish(_this4.pubsubKey('update'), data.nowItems);\n\t                        }.bind(this));\n\t                    } else {\n\t                        // 集合变更，发布事件\n\t                        _pubsubJs2.default.publish(this.pubsubKey('update'), mock.nowItems);\n\t                    }\n\t                }\n\t            } else {\n\t                return _persist2.default.update(this.colName, doc).then(function (data) {\n\t                    // 集合变更，发布事件\n\t                    _pubsubJs2.default.publish(_this4.pubsubKey('update'), data.nowItems);\n\t                }.bind(this));\n\t            }\n\t\n\t            /*// 模拟数据\r\n\t            let data = Persist.update(this.colName, doc)\r\n\t            PubSub.publish(this.pubsubKey('update'), data.nowItems);*/\n\t        }\n\t\n\t        /**\r\n\t         * [remove 向集合删除单条信息]\r\n\t         * @param  {[type]} doc [单条数据 或 数据编号]\r\n\t         * @return {[type]}     [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(doc) {\n\t            var _this5 = this;\n\t\n\t            // 清缓存\n\t            Collection.clearCacheData(this.colName, 'remove');\n\t            // 调用持久对象，更新单条数据\n\t            if (_persist2.default.isMock) {\n\t                // mock\n\t                var mock = _persist2.default.remove(this.colName, doc);\n\t                if (mock) {\n\t                    if (typeof mock.then === 'function') {\n\t                        return mock.then(function (data) {\n\t                            // 集合变更，发布事件\n\t                            _pubsubJs2.default.publish(_this5.pubsubKey('remove'), data.nowItems);\n\t                        }.bind(this));\n\t                    } else {\n\t                        // 集合变更，发布事件\n\t                        _pubsubJs2.default.publish(this.pubsubKey('remove'), mock.nowItems);\n\t                    }\n\t                }\n\t            } else {\n\t                return _persist2.default.remove(this.colName, doc).then(function (data) {\n\t                    // 集合变更，发布事件\n\t                    _pubsubJs2.default.publish(_this5.pubsubKey('remove'), data.nowItems);\n\t                }.bind(this));\n\t            }\n\t\n\t            /*// 模拟数据\r\n\t            let data = Persist.remove(this.colName, doc);\r\n\t            PubSub.publish(this.pubsubKey('remove'), data.nowItems);*/\n\t        }\n\t    }], [{\n\t        key: 'clearCacheData',\n\t        value: function clearCacheData(colName, p) {\n\t            // 获取过期时间\n\t            var timeout = _persist2.default.getCacheTimeOut(colName);\n\t            // 当前时间\n\t            var time = new Date().getTime();\n\t            // 当前集合数据\n\t            var db = window.db && window.db[colName].items.toArray();\n\t            // 需要删除的数组初始化\n\t            var reArr = [];\n\t\n\t            for (var i in db) {\n\t                // 开始时间\n\t                var start = db[i].cacheTime;\n\t\n\t                // 如果过期时间不等于-1，且超过设定的缓存时间\n\t                if (timeout != -1 && time - timeout > start) {\n\t                    // 要删除的\n\t                    reArr.push(i);\n\t                }\n\t            }\n\t\n\t            // 倒叙\n\t            reArr = reArr.reverse();\n\t\n\t            for (var i = 0; i < reArr.length; i++) {\n\t                // 删除\n\t                db.splice(reArr[i], 1);\n\t            }\n\t\n\t            // 更新缓存数据\n\t            _collectionUtils2.default.setLocalData(colName, _collectionUtils2.default.getList(db));\n\t        }\n\t    }]);\n\t\n\t    return Collection;\n\t}();\n\t\n\texports.default = Collection;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t} : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t};\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _mockConf = __webpack_require__(11);\n\t\n\tvar _mockConf2 = _interopRequireDefault(_mockConf);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t    return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\tfunction _defineProperty(obj, key, value) {\n\t    if (key in obj) {\n\t        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t    } else {\n\t        obj[key] = value;\n\t    }return obj;\n\t}\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\tvar MockUtils = function () {\n\t    function MockUtils() {\n\t        _classCallCheck(this, MockUtils);\n\t    }\n\t\n\t    _createClass(MockUtils, null, [{\n\t        key: 'getKeyItems',\n\t\n\t        /**\r\n\t         * [getKeyItems 获得对象key]\r\n\t         * @param  {[type]} obj [对象]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t        // 三级mock数据，非常长\n\t\n\t\n\t        // mock数据 长度级别\n\t        // 一级mock数据，较正常\n\t        value: function getKeyItems(obj) {\n\t            // 初始对象key数组\n\t            var tmpArr = [];\n\t            // 遍历对象\n\t            for (var i in obj) {\n\t                // 把key值赋值给key数组\n\t                tmpArr.push(i);\n\t            }\n\t            // 返回key数组\n\t            return tmpArr;\n\t        }\n\t\n\t        /**\r\n\t         * [mockUUID 随机生成一个指定长度的UUID]\r\n\t         * @param  {[type]} obj [操作返回对象]\r\n\t         * @param  {[type]} mockStr [mock数据结构]\r\n\t         * @param  {[type]} sp [存放数据字段]\r\n\t         * @return {[type]}   [description]\r\n\t         */\n\t\n\t        // mock数据长度级别\n\t\n\t        // 二级mock数据，较长\n\t\n\t    }, {\n\t        key: 'mockUUID',\n\t        value: function mockUUID(obj, mockStr, sp) {\n\t            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n\t                // 获取需要uuid的主键\n\t                var key = MockUtils.getKeyItems(obj)[0];\n\t                // 获取主键长度\n\t                var len = obj[key].length || 32;\n\t                // 随机数（默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1）\n\t                var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n\t                // 赋值给主键\n\t                obj[key] = MockUtils.getRandomString(len, $chars);\n\t                // 赋值\n\t                mockStr[sp] = obj;\n\t                // 返回\n\t                return mockStr;\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [createMockContent 生成mock数据]\r\n\t         * @param  {[type]} ret [操作返回对象]\r\n\t         * @return {[type]}   [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'createMockContent',\n\t        value: function createMockContent(ret, fields) {\n\t            // 赋值操作返回对象\n\t            var obj = JSON.parse(JSON.stringify(ret));\n\t            // 如果返回配置是对象\n\t            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n\t                var _ret = function () {\n\t                    // 获取操作返回key数组\n\t                    var attrArr = MockUtils.getKeyItems(obj);\n\t                    // 长度级别数组\n\t                    var levelArr = _mockConf2.default[MockUtils.mockLevel] || _mockConf2.default[MockUtils.level_1];\n\t\n\t                    // 遍历\n\t                    attrArr.forEach(function (key, i) {\n\t                        // 如果字段是数组\n\t                        if ($.isArray(obj[key])) {\n\t                            // 返回数组\n\t                            var valArr = [];\n\t                            // 数组随机长度\n\t                            var len = MockUtils.getRandomlength(levelArr.array);\n\t\n\t                            if (_typeof(obj[key][0]) === 'object') {\n\t                                // 遍历\n\t                                for (var n = 0; n < len; n++) {\n\t                                    // 初始对象\n\t                                    var temp = {};\n\t                                    // 遍历\n\t                                    for (var m in obj[key][0]) {\n\t                                        // 数组内对象\n\t                                        temp = $.extend(temp, _defineProperty({}, m, MockUtils.getItemValue(fields[m], levelArr)));\n\t                                    }\n\t                                    // 返回数组赋值\n\t                                    valArr.push(temp);\n\t                                }\n\t                            } else {\n\t                                // 遍历\n\t                                for (var n = 0; n < len; n++) {\n\t                                    // 返回数组赋值\n\t                                    valArr.push(MockUtils.getItemValue(obj[key][0], levelArr));\n\t                                }\n\t                            }\n\t\n\t                            // 赋值给字段\n\t                            obj[key] = valArr;\n\t                        } else {\n\t                            // 其他情况字段赋值\n\t                            obj[key] = MockUtils.getItemValue(fields[key], levelArr);\n\t                        }\n\t                    });\n\t\n\t                    return {\n\t                        v: obj\n\t                    };\n\t                }();\n\t\n\t                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [getItemValue 根据类型返回相应值]\r\n\t         * @param {[type]} type [类型]\r\n\t         * @param {[type]} levelArr [长度级别数组]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getItemValue',\n\t        value: function getItemValue(type, levelArr) {\n\t            // 返回变量\n\t            var value = '';\n\t\n\t            if (type === 'string') {\n\t                // 国际化\n\t                var i18n = window.collectionI18n;\n\t                // 获取随机长度字符串\n\t                value = MockUtils.getSpecialItem(i18n, levelArr[i18n]);\n\t            } else if (type === 'int') {\n\t                // 随机长度数字\n\t                value = MockUtils.getSpecialItem('int', levelArr['int']);\n\t            } else if (type === 'money') {\n\t                // 随机长度整数\n\t                var integer = MockUtils.getSpecialItem('int', levelArr['int']);\n\t                // 浮点数，两小数位\n\t                value = parseFloat(integer / 100).toFixed(2);\n\t            } else if (type === 'time') {\n\t                // 时间戳\n\t                value = new Date().getTime();\n\t            }\n\t\n\t            return value;\n\t        }\n\t\n\t        /**\r\n\t         * [getRandomlength 根据数组返回随机的长度]\r\n\t         * @param {[type]} level [级别数组]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getRandomlength',\n\t        value: function getRandomlength(level) {\n\t            // 判断有级别\n\t            if (level && level.length == 2) {\n\t                // 范围\n\t                var range = level[1] - level[0] + 1;\n\t                // 随机数\n\t                var rand = Math.random();\n\t                // 返回级别范围内的长度\n\t                return level[0] + Math.round(rand * range);\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [getRandomString 随机生成一个指定长度的字符串]\r\n\t         * @param  {[type]} obj [操作返回对象]\r\n\t         * @return {[type]}   [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getRandomString',\n\t        value: function getRandomString(len, chars) {\n\t            // 随机数长度\n\t            var maxPos = chars.length;\n\t\n\t            // 字符串\n\t            var str = '';\n\t            for (var i = 0; i < len; i++) {\n\t                // 产生随机数　\n\t                str += chars.charAt(Math.floor(Math.random() * maxPos));\n\t            }\n\t\n\t            // 返回随机生成的字符串\n\t            return str;\n\t        }\n\t\n\t        /**\r\n\t         * [getSpecialItem 根据类型和长度返回数据]\r\n\t         * @param  {[String]} type [类型]\r\n\t         * @param  {[int]} level [长度]\r\n\t         * @return {[type]}   [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getSpecialItem',\n\t        value: function getSpecialItem(type, level) {\n\t            if (type && level) {\n\t                if (type == 'int') {\n\t                    // 获取此类型随机长度\n\t                    var len = MockUtils.getRandomlength(level);\n\t                    // 随机数\n\t                    var $ints = '0123456789';\n\t                    // 返回随机字符串\n\t                    return parseInt(MockUtils.getRandomString(len, $ints));\n\t                } else if (type == 'en') {\n\t                    // 初始返回字符串\n\t                    var str = '';\n\t                    // 获取此类型随机长度\n\t                    var _len = MockUtils.getRandomlength(level);\n\t                    // 随机数（默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1）\n\t                    var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n\t                    // 返回随机字符串\n\t                    return MockUtils.getRandomString(_len, $chars);\n\t                } else if (type == 'zh') {\n\t                    // 编码区间数组\n\t                    var arr = new Array();\n\t                    // 获取此类型随机长度\n\t                    var length = MockUtils.getRandomlength(level);\n\t                    // 遍历\n\t                    for (var i = 0; i < length; i++) {\n\t                        // 元素赋值为汉字对应编码区间值\n\t                        arr[i] = Math.round(Math.random() * 20927) + 19968;\n\t                    }\n\t\n\t                    // 汉字数组\n\t                    var arr1 = new Array();\n\t                    // 遍历\n\t                    for (var i in arr) {\n\t                        // 元素赋值编码区间对应的汉字\n\t                        arr1.push(String.fromCodePoint(arr[i]));\n\t                    }\n\t                    // 返回长度级别内的汉字\n\t                    return arr1.join(\"\");\n\t                }\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return MockUtils;\n\t}();\n\t\n\tMockUtils.level_1 = 'level_1';\n\tMockUtils.level_2 = 'level_2';\n\tMockUtils.level_3 = 'level_3';\n\t\n\tMockUtils.mockLevel = function () {\n\t    // 获得当前浏览器url\n\t    var href = location.href;\n\t\n\t    // 如果url包含mock\n\t    if (href.includes('mock')) {\n\t        // mock级别开始索引\n\t        var start = href.indexOf('mock') + 5;\n\t        // mock级别结束索引\n\t        var end = href.indexOf('&', start);\n\t        // 如果结束索引无效，则为url长度\n\t        if (end < 0) {\n\t            // 设置为url长度\n\t            end = href.length;\n\t        }\n\t        // 返回mock级别，如无规定，则返回级别一\n\t        return href.substring(start, end) || MockUtils.level_1;\n\t    }\n\t}();\n\t\n\texports.default = MockUtils;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _mockUtils = __webpack_require__(8);\n\t\n\tvar _mockUtils2 = _interopRequireDefault(_mockUtils);\n\t\n\tvar _collectionUtils = __webpack_require__(2);\n\t\n\tvar _collectionUtils2 = _interopRequireDefault(_collectionUtils);\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t    return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\tfunction _defineProperty(obj, key, value) {\n\t    if (key in obj) {\n\t        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t    } else {\n\t        obj[key] = value;\n\t    }return obj;\n\t}\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\t/**\r\n\t * 持久化数据对象\r\n\t */\n\tvar Persist = function () {\n\t    function Persist() {\n\t        _classCallCheck(this, Persist);\n\t    }\n\t\n\t    _createClass(Persist, null, [{\n\t        key: 'isMockUrl',\n\t\n\t        /**\r\n\t         * [isMockUrl 是否有mockurl]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t        // 初始化jquery\n\t        value: function isMockUrl(colName, oper) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合操作相关配置\n\t            var op = col && col[oper];\n\t            // 获取集合指定的json文件\n\t            var url = op && op.mockUrl || '';\n\t\n\t            return url;\n\t        }\n\t\n\t        // 是否需要mock数据\n\t\n\t    }, {\n\t        key: 'getStoreParam',\n\t\n\t        /**\r\n\t         * [getStoreParam 获取mock存放字段]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t        value: function getStoreParam(colName, oper) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合操作相关配置\n\t            var op = col && col[oper];\n\t            // 获得集合操作mock结构数据存放字段\n\t            var sp = op && op.storeParam || 'entity';\n\t\n\t            return sp;\n\t        }\n\t    }, {\n\t        key: 'mock',\n\t\n\t        /**\r\n\t         * [mock 根据集合名称、操作、参数，生产mock数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @param  {[type]} doc     [操作参数]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t        value: function mock(colName, oper, doc) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合操作相关配置\n\t            var op = col && col[oper];\n\t            // 获得集合操作返回值相关配置\n\t            var ret = op && op.return;\n\t            // 获取集合fields配置\n\t            var mockFields = col && col.entity && col.entity.fields;\n\t            // 获得集合操作mock结构\n\t            var mockStr = op && op.structure || { \"millis\": 32, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": '' };\n\t            // 获得集合操作mock结构数据存放字段\n\t            var sp = Persist.getStoreParam(colName, oper);\n\t            // 获取集合主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t\n\t            // 如果没有return参数、return为null或者return为空对象\n\t            if (!ret || $.isEmptyObject(ret)) {\n\t                // 是否有mockurl\n\t                var url = Persist.isMockUrl(colName, oper);\n\t                // 返回url地址的JSON数据或者默认JSON数据\n\t                return url ? url : window.collectionMock;\n\t\n\t                // 只要求返回主键情况\n\t            } else if (ret.hasOwnProperty(key) && Persist.getObjLength(ret) == 1) {\n\t                // 随机生产一个唯一标识\n\t                return _mockUtils2.default.mockUUID(ret, mockStr, sp);\n\t                // 根据return返回数据（有return和fileds一般为查询接口）\n\t            } else if (ret && mockFields) {\n\t                // 生成的对象\n\t                var obj = _mockUtils2.default.createMockContent(ret, mockFields);\n\t                // 赋值\n\t                mockStr[sp] = obj;\n\t\n\t                // 返回\n\t                return mockStr;\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [getObjectLength 获得对象长度]\r\n\t         * @param  {[type]} obj [对象]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getObjLength',\n\t        value: function getObjLength(obj) {\n\t            // 对象初始长度为0\n\t            var count = 0;\n\t            // 遍历对象\n\t            for (var i in obj) {\n\t                // 对象长度累加\n\t                count++;\n\t            }\n\t            // 返回对象长度\n\t            return count;\n\t        }\n\t\n\t        /**\r\n\t         * [getUrl 获得集合操作url]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @param  {[type]} param   [操作参数]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getUrl',\n\t        value: function getUrl(colName, oper, param) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合--操作相关配置\n\t            var op = col && col[oper];\n\t            // 获得结合--操作--url\n\t            return op && op.getUrl(param);\n\t        }\n\t\n\t        /**\r\n\t         * [getPrimaryKey 获得集合返回链]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getReturnChain',\n\t        value: function getReturnChain(colName, oper) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合--操作相关配置\n\t            var op = col && col[oper];\n\t            // 获得返回链\n\t            return op && op.returnChain;\n\t        }\n\t\n\t        /**\r\n\t         * [getCacheTimeOut 获得集合过期时间]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} oper    [操作名称]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getCacheTimeOut',\n\t        value: function getCacheTimeOut(colName) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合--entity\n\t            var en = col && col.entity;\n\t            // 获得过期时间\n\t            return en && en.cacheTimeOut;\n\t        }\n\t\n\t        /**\r\n\t         * [getPrimaryKey 获得集合主键]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getPrimaryKey',\n\t        value: function getPrimaryKey(colName) {\n\t            // 获得集合相关配置\n\t            var col = window.collectionConfig[colName];\n\t            // 获得集合--entity\n\t            var en = col && col.entity;\n\t            // 获得主键\n\t            return en && en.primaryKey;\n\t        }\n\t\n\t        /**\r\n\t         * [getParamValue 获得键值对的值]\r\n\t         * @param  {[type]} doc [参数对]\r\n\t         * @param  {[type]} key [所需key]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getParamValue',\n\t        value: function getParamValue(doc, key) {\n\t            // 空则退出\n\t            if (!doc || !key) return false;\n\t            // 获得键值对\n\t            var param = _collectionUtils2.default.getKeyObj(doc, key);\n\t\n\t            // 如果不存在则报错退出\n\t            if (!param) {\n\t                console.error('找不到该key值');\n\t                return false;\n\t            }\n\t\n\t            // 返回该key值\n\t            return param[key];\n\t        }\n\t\n\t        /**\r\n\t         * [getPrimaryKeyValue 获得主键键值对的值]\r\n\t         * @param  {[type]} doc [参数对]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getPrimaryKeyValue',\n\t        value: function getPrimaryKeyValue(colName, doc) {\n\t            // 获取主键值\n\t            var val = '';\n\t\n\t            if (typeof doc == 'string') {\n\t                val = doc;\n\t            } else {\n\t                // 获取主键\n\t                var key = Persist.getPrimaryKey(colName);\n\t                // 获取参数中的主键值对\n\t                val = Persist.getParamValue(doc, key);\n\t            }\n\t\n\t            // 如果没有则报错退出\n\t            if (!val) {\n\t                console.error('找不到主键值');\n\t                return false;\n\t            }\n\t\n\t            return val;\n\t        }\n\t\n\t        /**\r\n\t         * [getNowdbData 获取新集合数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} chain [返回链]\r\n\t         * @param  {[type]} p [集合操作]\r\n\t         * @param  {[type]} data [插入数据]\r\n\t         * @param  {[type]} key [主键]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getNowdbData',\n\t        value: function getNowdbData(colName, chain, p, data, key) {\n\t            var newdb = [];\n\t            var sp = Persist.getStoreParam(colName, p);\n\t            var d = data[sp];\n\t\n\t            if (chain) {\n\t                var cArr = chain.split('.');\n\t                newdb = data;\n\t\n\t                for (var i = 0; i < cArr.length; i++) {\n\t                    newdb = newdb[cArr[i]];\n\t                }\n\t            } else {\n\t                if (d[key]) {\n\t                    newdb = d;\n\t                } else {\n\t                    for (var i in d) {\n\t                        if (d[i] && d[i].length > 0) {\n\t                            newdb = d[i];\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (p == 'findOne' && newdb && newdb.length > 0) {\n\t                newdb = newdb[0];\n\t            }\n\t\n\t            return newdb;\n\t        }\n\t\n\t        /**\r\n\t         * [isInsert 判断是否可插入]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p [操作名称]\r\n\t         * @param  {[type]} data [待插入数据]\r\n\t         * @param  {[type]} key [主键]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isInsert',\n\t        value: function isInsert(colName, p, data, key) {\n\t            var insert = true;\n\t            var db = window.db && window.db[colName] && window.db[colName].items;\n\t            var extend = (0, _immutable.List)();\n\t\n\t            if (db && db.size > 0) {\n\t                db.forEach(function (val, i) {\n\t                    if (val[key] == data[key]) {\n\t                        insert = false;\n\t\n\t                        if (p == 'findOne') {\n\t                            var one = $.extend({}, val, data);\n\t                            extend = db.set(i, one);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t\n\t            if (p == 'findOne') {\n\t                return $.extend({ 'isInsert': insert }, { 'extend': extend });\n\t            }\n\t\n\t            return insert;\n\t        }\n\t\n\t        /**\r\n\t         * [getDataKey 获得集合需要的key值对]\r\n\t         * [p 操作名称]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'getDataKey',\n\t        value: function getDataKey(colName, p) {\n\t            // 获得集合配置\n\t            var col = window.collectionConfig[colName];\n\t            if (col && col[p] && col[p].include) {\n\t                // 返回include所需参数\n\t                return [col && col[p] && col[p].include, false];\n\t            } else if (col && col[p] && col[p].exclusive) {\n\t                // 返回exclusive所需参数\n\t                return [col && col[p] && col[p].exclusive, true];\n\t            } else {\n\t                // 返回用户输入参数\n\t                return ['', false];\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [findOne 查询集合某数据详情]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} doc     [单条数据]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'findOne',\n\t        value: function findOne(colName, doc) {\n\t            // 操作名称\n\t            var p = 'findOne';\n\t\n\t            // 如果需要返回mock数据\n\t            if (Persist.isMock) {\n\t                // 生成相关mock数据\n\t                var mock = Persist.mock(colName, p, doc);\n\t\n\t                if (typeof mock === 'string') {\n\t                    return $.getJSON(mock, null, function (data) {\n\t                        // 返回相关操作数据\n\t                        Persist.setFindOneData(colName, p, data);\n\t                    });\n\t                } else {\n\t                    // 返回相关操作数据\n\t                    return Persist.setFindOneData(colName, p, mock);\n\t                }\n\t            }\n\t\n\t            // 获取主键值\n\t            var param = Persist.getPrimaryKeyValue(colName, doc);\n\t            // 执行ajax请求查询某集合数据详情    \n\t            return $.get(Persist.getUrl(colName, 'findOne', param), null, function (data) {\n\t                if (data.code === 'SUCCESS') {\n\t                    Persist.setFindOneData(colName, p, data);\n\t                }\n\t            });\n\t\n\t            // 模拟数据\n\t            /*let data = { \"millis\": 32, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"allProjectNum\": null, \"joinNum\": 1, \"closeNum\": 0, \"projectInfoList\": [{ \"projectId\": \"8c8c8ca956e00caa0156e8be040400dd\", \"projectName\": \"来，跟我一起说：耶~\", \"projectManager\": \"沈佳芳2233\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"sjzmdqkk\", \"projectNameForShirt\": \"sjzmd\", \"projectCode\": \"wyqkk\", \"commonFlag\": \"16001\" }], \"closeProjectInfoList\": [], \"commonProjectInfoList\": null, \"regularProjectInfoList\": null } };\r\n\t            if (data.code === 'SUCCESS') {\r\n\t                return Persist.setFindOneData(colName, p, data);\r\n\t            }*/\n\t        }\n\t\n\t        /**\r\n\t         * [setFindOneData 对值进行操作]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p     [操作名称]\r\n\t         * @param  {[type]} data     [数据]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setFindOneData',\n\t        value: function setFindOneData(colName, p, data) {\n\t            // 获取返回链\n\t            var chain = Persist.getReturnChain(colName, p);\n\t            // 获取主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t\n\t            var newdb = Persist.getNowdbData(colName, chain, p, data, key);\n\t\n\t            if (!newdb) {\n\t                console.error(colName + \"\\u8FD4\\u56DE\\u94FE\" + chain + \"\\uFF0C\\u914D\\u7F6E\\u6709\\u8BEF\\uFF01\");\n\t                return;\n\t            }\n\t\n\t            newdb.cacheTime = new Date().getTime();\n\t\n\t            var arr = Persist.isInsert(colName, p, newdb, key);\n\t            var db = window.db && window.db[colName] && window.db[colName].items;\n\t            if (arr.isInsert && db) {\n\t                _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb));\n\t            }\n\t\n\t            if (!arr.isInsert && db) {\n\t                _collectionUtils2.default.setLocalData(colName, arr.extend);\n\t            }\n\t\n\t            var newArr = new Array(newdb);\n\t            data.nowItems = (0, _immutable.List)(newArr);\n\t\n\t            return data;\n\t        }\n\t\n\t        /**\r\n\t         * [find 查询数据集合]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} doc     [数据参数]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(colName, doc, colEntity) {\n\t            // 操作名称\n\t            var p = 'find';\n\t\n\t            // 如果需要返回mock数据\n\t            if (Persist.isMock) {\n\t                // 生成相关mock数据\n\t                var mock = Persist.mock(colName, p, doc);\n\t\n\t                if (typeof mock === 'string') {\n\t                    return $.getJSON(mock, null, function (data) {\n\t                        // 返回相关操作数据\n\t                        Persist.setFindData(colName, p, data);\n\t                    });\n\t                } else {\n\t                    // 返回相关操作数据\n\t                    return Persist.setFindData(colName, p, mock);\n\t                }\n\t            }\n\t\n\t            // 有缓存数据 && 缓存没有过期\n\t            /*if (window.collectionConfig[colName][p][\"fulldata\"] && new Date().getTime() <= (colEntity.timeout || 0)) {\r\n\t                // 获取缓存数据\r\n\t                return new Promise((resolve, reject) => {\r\n\t                    resolve(Utils.filterListKey(colEntity.items, doc));\r\n\t                });\r\n\t            }*/\n\t\n\t            // 执行ajax请求查询某集合数据详情\n\t            return $.get(Persist.getUrl(colName, p, doc), doc, function (data) {\n\t                if (data.code === 'SUCCESS') {\n\t                    Persist.setFindData(colName, p, data);\n\t                }\n\t                // }).then((res) => {\n\t                //             // 设置过期时间\n\t                //             if (window.collectionConfig[colName][p][\"fulldata\"]) {\n\t                //                 res.timeout = new Date().getTime() + window.collectionConfig[colName][p][\"validate\"];\n\t                //             }\n\t            });\n\t\n\t            // 模拟数据\n\t            /*let data = { \"millis\": 40, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"allProjectNum\": null, \"joinNum\": 3, \"closeNum\": 0, \"projectInfoList\": [{ \"projectId\": \"8c8c8ca9543dbb2901544b98df3d0963\", \"projectName\": \"莫道芳时易度，朝暮1\", \"projectManager\": \"沈佳芳\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"test0425G30\", \"projectNameForShirt\": \"test\", \"projectCode\": \"test\", \"commonFlag\": \"16001\" }, { \"projectId\": \"8c8c8ca95429546201542d0888bc028d\", \"projectName\": \"何处几叶萧萧雨1\", \"projectManager\": \"沈佳芳\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"123456jpg\", \"projectNameForShirt\": \"12\", \"projectCode\": \"123\", \"commonFlag\": \"16001\" }], \"closeProjectInfoList\": [], \"commonProjectInfoList\": null, \"regularProjectInfoList\": null } };\r\n\t            if (data.code === 'SUCCESS') {\r\n\t                return Persist.setFindData(colName, p, data);\r\n\t            }*/\n\t        }\n\t\n\t        /**\r\n\t         * [setFindData 对值进行操作]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p     [操作名称]\r\n\t         * @param  {[type]} data     [数据]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setFindData',\n\t        value: function setFindData(colName, p, data) {\n\t            // 获取返回链\n\t            var chain = Persist.getReturnChain(colName, p);\n\t            // 获取主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t\n\t            var newdb = Persist.getNowdbData(colName, chain, p, data, key);\n\t\n\t            if (!newdb) {\n\t                console.error(colName + \"\\u8FD4\\u56DE\\u94FE\" + chain + \"\\uFF0C\\u914D\\u7F6E\\u6709\\u8BEF\\uFF01\");\n\t                return;\n\t            }\n\t\n\t            var db = window.db && window.db[colName] && window.db[colName].items;\n\t\n\t            if (db && db.size > 0) {\n\t                var nowdb = (0, _immutable.List)();\n\t\n\t                for (var n in newdb) {\n\t                    var insert = true;\n\t\n\t                    db = nowdb.size > 0 ? nowdb : db;\n\t                    db.forEach(function (val, i) {\n\t                        newdb[n].cacheTime = new Date().getTime();\n\t\n\t                        if (val[key] == newdb[n][key]) {\n\t                            insert = false;\n\t                            nowdb = db.set(i, newdb[n]);\n\t                        }\n\t                    });\n\t\n\t                    if (insert) {\n\t                        _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb[n]));\n\t                    } else {\n\t                        _collectionUtils2.default.setLocalData(colName, nowdb);\n\t                    }\n\t                }\n\t            } else {\n\t                if (db) {\n\t                    for (var i in newdb) {\n\t                        newdb[i].cacheTime = new Date().getTime();\n\t                        _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb[i]));\n\t                    }\n\t                }\n\t            }\n\t\n\t            data.nowItems = (0, _immutable.List)(newdb);\n\t            return data;\n\t        }\n\t\n\t        /**\r\n\t         * [insert 向集合插入单条数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} doc [单条数据]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'insert',\n\t        value: function insert(colName, doc) {\n\t            // 操作名称\n\t            var p = \"insert\";\n\t            // 获取实际所需参数key值\n\t            var arr = Persist.getDataKey(colName, p);\n\t            // 获取接口调用需要的参数值对\n\t            var paramObj = _collectionUtils2.default.getParamObj(doc, arr);\n\t\n\t            // 如果需要返回mock数据\n\t            if (Persist.isMock) {\n\t                // 生成相关mock数据\n\t                var mock = Persist.mock(colName, p, doc);\n\t\n\t                if (typeof mock === 'string') {\n\t                    return $.getJSON(mock, null, function (data) {\n\t                        // 返回相关操作数据\n\t                        Persist.setInsertData(colName, p, data, paramObj);\n\t                    });\n\t                } else {\n\t                    // 返回相关操作数据\n\t                    return Persist.setInsertData(colName, p, mock, paramObj);\n\t                }\n\t            }\n\t\n\t            // 执行ajax请求查询某集合数据详情\n\t            return $.post(Persist.getUrl(colName, p, doc), paramObj, function (data) {\n\t                if (data.code === 'SUCCESS') {\n\t                    Persist.setInsertData(colName, p, data, paramObj);\n\t                }\n\t            });\n\t\n\t            // 模拟数据\n\t            /*let data = { \"millis\": 154, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"projectId\": \"8c8c8ca956e00caa0156e8be040400dc\" } };\r\n\t            if (data.code === 'SUCCESS') {\r\n\t                return Persist.setInsertData(colName, p, data, paramObj);\r\n\t            }*/\n\t        }\n\t\n\t        /**\r\n\t         * [setInsertData 对值进行操作]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p     [操作名称]\r\n\t         * @param  {[type]} data     [数据]\r\n\t         * @param  {[type]} paramObj     [参数]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setInsertData',\n\t        value: function setInsertData(colName, p, data, paramObj) {\n\t            // 获取主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t\n\t            var sp = Persist.getStoreParam(colName, p);\n\t            var d = data[sp];\n\t            var insert = Persist.isInsert(colName, p, d, key);\n\t\n\t            if (insert) {\n\t                var one = $.extend({ \"cacheTime\": new Date().getTime() }, paramObj, _defineProperty({}, key, d[key]));\n\t\n\t                var db = window.db && window.db[colName] && window.db[colName].items;\n\t                if (db) {\n\t                    window.db[colName].items = window.db[colName].items.push(one);\n\t                    window.localStorage.setItem('db', JSON.stringify(window.db));\n\t                }\n\t\n\t                var newArr = new Array(one);\n\t                data.nowItems = (0, _immutable.List)(newArr);\n\t                return data;\n\t            } else {\n\t                console.error('已存在此数据，不能重复新建！');\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [update 更新集合中单条数据]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} doc [单条数据]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'update',\n\t        value: function update(colName, doc) {\n\t            var p = 'update';\n\t\n\t            // 如果需要返回mock数据\n\t            if (Persist.isMock) {\n\t                // 生成相关mock数据\n\t                var mock = Persist.mock(colName, p, doc);\n\t\n\t                if (typeof mock === 'string') {\n\t                    return $.getJSON(mock, null, function (data) {\n\t                        // 返回相关操作数据\n\t                        Persist.setUpdateData(colName, p, data, doc);\n\t                    });\n\t                } else {\n\t                    // 返回相关操作数据\n\t                    return Persist.setUpdateData(colName, p, mock, doc);\n\t                }\n\t            }\n\t\n\t            // 获取实际所需参数key值\n\t            var arr = Persist.getDataKey(colName, p);\n\t            // 获取接口调用需要的参数值对\n\t            var paramObj = _collectionUtils2.default.getParamObj(doc, arr);\n\t            // 获取主键值\n\t            var param = Persist.getPrimaryKeyValue(colName, doc);\n\t            // 执行ajax请求查询某集合数据详情\n\t            return $.put(Persist.getUrl(colName, p, param), paramObj, function (data) {\n\t                if (data.code === 'SUCCESS') {\n\t                    Persist.setUpdateData(colName, p, data, doc);\n\t                }\n\t            });\n\t\n\t            // 模拟数据\n\t            /*let data = { \"millis\": 112, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"projectTagInfoList\": null, \"tagList\": [] } };\r\n\t            if (data.code === 'SUCCESS') {\r\n\t                return Persist.setUpdateData(colName, p, data, doc);\r\n\t            }*/\n\t        }\n\t\n\t        /**\r\n\t         * [setUpdateData 对值进行操作]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} p     [操作名称]\r\n\t         * @param  {[type]} data     [数据]\r\n\t         * @param  {[type]} doc     [传入参数]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'setUpdateData',\n\t        value: function setUpdateData(colName, p, data, doc) {\n\t            // 获取主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t\n\t            var sp = Persist.getStoreParam(colName, p);\n\t            var d = data[sp];\n\t\n\t            if (d && d.length > 0) {\n\t                var newArr = new Array(_collectionUtils2.default.updateData(colName, d, key));\n\t                data.nowItems = (0, _immutable.List)(newArr);\n\t                return data;\n\t            } else {\n\t                var _newArr = new Array(_collectionUtils2.default.updateData(colName, doc, key));\n\t                data.nowItems = (0, _immutable.List)(_newArr);\n\t                return data;\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * [remove 向集合删除单条信息]\r\n\t         * @param  {[type]} colName [集合名称]\r\n\t         * @param  {[type]} doc [单条数据 或 数据编号]\r\n\t         * @return {[type]}         [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(colName, doc) {\n\t            var p = 'remove';\n\t            // 获取主键\n\t            var key = Persist.getPrimaryKey(colName);\n\t            // 获取主键值\n\t            var param = Persist.getPrimaryKeyValue(colName, doc);\n\t\n\t            // 如果需要返回mock数据\n\t            if (Persist.isMock) {\n\t                // 生成相关mock数据\n\t                var mock = Persist.mock(colName, p, doc);\n\t\n\t                if (typeof mock === 'string') {\n\t                    return $.getJSON(mock, null, function (data) {\n\t                        // 返回相关操作数据\n\t                        var newArr = new Array(_collectionUtils2.default.removeData(colName, param, key));\n\t                        data.nowItems = (0, _immutable.List)(newArr);\n\t                    });\n\t                } else {\n\t                    // 返回相关操作数据\n\t                    var newArr = new Array(_collectionUtils2.default.removeData(colName, param, key));\n\t                    mock.nowItems = (0, _immutable.List)(newArr);\n\t                    return mock;\n\t                }\n\t            }\n\t\n\t            // 执行ajax请求查询某集合数据详情\n\t            return $.delete(Persist.getUrl(colName, p, param), null, function (data) {\n\t                if (data.code === 'SUCCESS') {\n\t                    var _newArr2 = new Array(_collectionUtils2.default.removeData(colName, param, key));\n\t                    data.nowItems = (0, _immutable.List)(_newArr2);\n\t                }\n\t            });\n\t\n\t            // 模拟数据\n\t            /*let data = { \"millis\": 770, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": null };\r\n\t            if (data.code === 'SUCCESS') {\r\n\t                let newArr = new Array(Utils.removeData(colName, param, key));\r\n\t                data.nowItems = List(newArr);\r\n\t                return data;\r\n\t            }*/\n\t        }\n\t    }]);\n\t\n\t    return Persist;\n\t}();\n\t\n\tPersist.initJquery = function () {\n\t    // ajax全局配置选项设置\n\t    $.ajaxSetup({\n\t        cache: false\n\t    });\n\t\n\t    // 发送ajax拦截方法\n\t    $(document).ajaxSend(function (evt, request, settings) {});\n\t\n\t    // ajax请求成功, 拦截后台操作错误的提示消息\n\t    $(document).ajaxSuccess(function (event, xhr, settings) {});\n\t\n\t    // ajax请求失败, 提示网络请求错误消息\n\t    $(document).ajaxError(function (event, xhr, settings, exception) {});\n\t\n\t    // 扩展jquery ajax支持put delete方法.\n\t    jQuery.each([\"put\", \"delete\"], function (i, method) {\n\t\n\t        jQuery[method] = function (url, data, callback, type) {\n\t            // shift arguments if data argument was omitted\n\t            if (jQuery.isFunction(data)) {\n\t                type = type || callback || 'json';\n\t                callback = data;\n\t                data = undefined;\n\t            }\n\t\n\t            return jQuery.ajax({\n\t                url: url,\n\t                type: method,\n\t                dataType: type,\n\t                data: data,\n\t                success: callback\n\t            });\n\t        };\n\t    });\n\t}();\n\t\n\tPersist.isMock = function () {\n\t    // 初始化非mock数据\n\t    var isMock = false;\n\t    // 获得当前 浏览器url\n\t    var href = location.href;\n\t\n\t    // 如果url包含mock\n\t    if (href.includes('mock')) {\n\t        // 需要mock数据\n\t        isMock = true;\n\t    }\n\t\n\t    return isMock;\n\t}();\n\t\n\texports.default = Persist;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () {\n\t  function defineProperties(target, props) {\n\t    for (var i = 0; i < props.length; i++) {\n\t      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t    }\n\t  }return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t  };\n\t}();\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t}\n\t\n\t/**\r\n\t * Query 查询器\r\n\t */\n\tvar Query = function () {\n\t  function Query() {\n\t    _classCallCheck(this, Query);\n\t  }\n\t\n\t  _createClass(Query, null, [{\n\t    key: \"$in\",\n\t\n\t    /**\r\n\t     * [$in 查询器 查询条件 解析]\r\n\t     * @param         {[type]}                 array [查询数组]\r\n\t     * @return        {[type]}                       [查询字符串]\r\n\t     */\n\t    value: function $in(array) {\n\t      return !Array.isArray(array) ? false : array.toString();\n\t    }\n\t  }]);\n\t\n\t  return Query;\n\t}();\n\t\n\texports.default = Query;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\r\n\t * mock数据相关配置\r\n\t */\n\texports.default = {\n\t    // 一级mock数据长度设置\n\t    \"level_1\": {\n\t        \"en\": [5, 50],\n\t        \"zh\": [1, 20],\n\t        \"int\": [1, 10],\n\t        \"array\": [0, 20]\n\t    },\n\t    // 二级mock数据长度设置\n\t    \"level_2\": {\n\t        \"en\": [50, 100],\n\t        \"zh\": [20, 80],\n\t        \"int\": [10, 20],\n\t        \"array\": [20, 80]\n\t    },\n\t    // 三级mock数据长度设置\n\t    \"level_3\": {\n\t        \"en\": [100, 200],\n\t        \"zh\": [80, 150],\n\t        \"int\": [20, 100],\n\t        \"array\": [80, 150]\n\t    }\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t} : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n\t};\n\t\n\tvar _createClass = function () {\n\t    function defineProperties(target, props) {\n\t        for (var i = 0; i < props.length; i++) {\n\t            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t        }\n\t    }return function (Constructor, protoProps, staticProps) {\n\t        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t    };\n\t}();\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) {\n\t    if (!(instance instanceof Constructor)) {\n\t        throw new TypeError(\"Cannot call a class as a function\");\n\t    }\n\t}\n\t\n\t/**\r\n\t * 处理数据工具方法\r\n\t */\n\tvar Utils = function () {\n\t    function Utils() {\n\t        _classCallCheck(this, Utils);\n\t    }\n\t\n\t    _createClass(Utils, null, [{\n\t        key: 'pushPollFuns',\n\t\n\t        /**\r\n\t         * [pushPollFuns 向轮巡回调数组，放入轮巡函数] todo 接收对象，时间倍数\r\n\t         * @param  {[type]} obj [需要轮巡的函数，结构 function 或 {func: ()=> {}, delay: 10}]\r\n\t         * @return {[type]}      [description]\r\n\t         */\n\t\n\t        // 轮巡回调函数数组\n\t        value: function pushPollFuns(obj) {\n\t            // 设置func 值\n\t            var func = obj;\n\t            // 如果obj 为对象类型\n\t            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n\t                // 获取对象 func 属性\n\t                func = obj.func;\n\t            }\n\t            // 当为函数类型\n\t            if (typeof func === 'function') {\n\t                // 向数组放置，需轮巡的函数 或对象\n\t                Utils.pollFuns.push(obj);\n\t            }\n\t        }\n\t\n\t        // 返回页面对象key\n\t\n\t\n\t        // 对系统进行轮巡\n\t\n\t    }, {\n\t        key: 'getKey',\n\t\n\t        /**\r\n\t         * 返回一个唯一的key <React key={Utils.getKey('react')} />\r\n\t         * @param  { 唯一key前缀 }\r\n\t         * @return {[react_1 字符串作为唯一key]}\r\n\t         */\n\t        value: function getKey(prefix) {\n\t            // 构建前缀字符串\n\t            var p = (prefix || 'key') + '_';\n\t            // 全局key 自增1\n\t            Utils.key = Utils.key + 1;\n\t            // 返回唯一key\n\t            return p + Utils.key;\n\t        }\n\t\n\t        /**\r\n\t         * [uuid 生成uuid字符串]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'uuid',\n\t        value: function uuid() {\n\t            // 返回uuid字符串\n\t            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t                var r = Math.random() * 16 | 0,\n\t                    v = c == 'x' ? r : r & 0x3 | 0x8;\n\t                return v.toString(16);\n\t            });\n\t        }\n\t\n\t        /**\r\n\t         * 判断是否为空\r\n\t         * @param  {[type]}  obj 对象\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isEmpty',\n\t        value: function isEmpty(obj) {\n\t            if (!obj) return true;\n\t            if (this.isArray(obj)) {\n\t                return obj.length == 0;\n\t            } else if (this.isObject(obj)) {\n\t                for (var name in obj) {\n\t                    return false;\n\t                }\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'isObject',\n\t\n\t        /**\r\n\t         * 判断是否为对象\r\n\t         * @param  {[type]}  obj 对象\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t        value: function isObject(obj) {\n\t            var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n\t            return type === 'function' || type === 'object' && !!obj;\n\t        }\n\t    }, {\n\t        key: 'isArray',\n\t\n\t        /**\r\n\t         * 判断是否为数组\r\n\t         * @param  {[type]}  obj 数组\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t        value: function isArray(obj) {\n\t            return Array.isArray(obj) || toString.call(obj) === '[object Array]';\n\t        }\n\t    }]);\n\t\n\t    return Utils;\n\t}();\n\t\n\tUtils.pollFuns = [];\n\t\n\tUtils.poll = function () {\n\t    // 1秒轮巡\n\t    setInterval(function () {\n\t        // 便利需轮巡的数组\n\t        for (var i in Utils.pollFuns) {\n\t            // 获取需要轮巡的对象\n\t            var obj = Utils.pollFuns[i];\n\t            // 如果该值为函数类型\n\t            if (typeof obj === 'function') {\n\t                // 直接轮巡函数\n\t                obj();\n\t                // 如果为对象类型\n\t            } else {\n\t                // 获得当前延迟秒数\n\t                obj.cur = (obj.cur || obj.delay) - 1;\n\t                // 如果不需要延迟\n\t                if (obj.cur < 1) {\n\t                    // 如果对象 func 为函数类型\n\t                    if (typeof obj.func === 'function') {\n\t                        // 执行轮巡函数\n\t                        obj.func();\n\t                    }\n\t                    // 延迟时间重置\n\t                    obj.cur = obj.delay;\n\t                }\n\t            }\n\t        }\n\t    }, 1000);\n\t}();\n\t\n\tUtils.key = 0;\n\texports.default = Utils;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * 处理数据工具方法\r\n\t */\n\tvar Utils = function () {\n\t    function Utils() {\n\t        _classCallCheck(this, Utils);\n\t    }\n\t\n\t    _createClass(Utils, null, [{\n\t        key: 'pushPollFuns',\n\t\n\t\n\t        /**\r\n\t         * [pushPollFuns 向轮巡回调数组，放入轮巡函数] todo 接收对象，时间倍数\r\n\t         * @param  {[type]} obj [需要轮巡的函数，结构 function 或 {func: ()=> {}, delay: 10}]\r\n\t         * @return {[type]}      [description]\r\n\t         */\n\t\n\t\n\t        // 轮巡回调函数数组\n\t        value: function pushPollFuns(obj) {\n\t            // 设置func 值\n\t            var func = obj;\n\t            // 如果obj 为对象类型\n\t            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n\t                // 获取对象 func 属性\n\t                func = obj.func;\n\t            }\n\t            // 当为函数类型\n\t            if (typeof func === 'function') {\n\t                // 向数组放置，需轮巡的函数 或对象\n\t                Utils.pollFuns.push(obj);\n\t            }\n\t        }\n\t\n\t        // 返回页面对象key\n\t\n\t\n\t        // 对系统进行轮巡\n\t\n\t    }, {\n\t        key: 'getKey',\n\t\n\t\n\t        /**\r\n\t         * 返回一个唯一的key <React key={Utils.getKey('react')} />\r\n\t         * @param  { 唯一key前缀 }\r\n\t         * @return {[react_1 字符串作为唯一key]}\r\n\t         */\n\t        value: function getKey(prefix) {\n\t            // 构建前缀字符串\n\t            var p = (prefix || 'key') + '_';\n\t            // 全局key 自增1\n\t            Utils.key = Utils.key + 1;\n\t            // 返回唯一key\n\t            return p + Utils.key;\n\t        }\n\t\n\t        /**\r\n\t         * [uuid 生成uuid字符串]\r\n\t         * @return {[type]} [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'uuid',\n\t        value: function uuid() {\n\t            // 返回uuid字符串\n\t            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t                var r = Math.random() * 16 | 0,\n\t                    v = c == 'x' ? r : r & 0x3 | 0x8;\n\t                return v.toString(16);\n\t            });\n\t        }\n\t\n\t        /**\r\n\t         * 判断是否为空\r\n\t         * @param  {[type]}  obj 对象\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isEmpty',\n\t        value: function isEmpty(obj) {\n\t            if (!obj) return true;\n\t            if (this.isArray(obj)) {\n\t                return obj.length == 0;\n\t            } else if (this.isObject(obj)) {\n\t                for (var name in obj) {\n\t                    return false;\n\t                }\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'isObject',\n\t\n\t\n\t        /**\r\n\t         * 判断是否为对象\r\n\t         * @param  {[type]}  obj 对象\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t        value: function isObject(obj) {\n\t            var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n\t            return type === 'function' || type === 'object' && !!obj;\n\t        }\n\t    }, {\n\t        key: 'isArray',\n\t\n\t\n\t        /**\r\n\t         * 判断是否为数组\r\n\t         * @param  {[type]}  obj 数组\r\n\t         * @return {Boolean}     [description]\r\n\t         */\n\t        value: function isArray(obj) {\n\t            return Array.isArray(obj) || toString.call(obj) === '[object Array]';\n\t        }\n\t    }]);\n\t\n\t    return Utils;\n\t}();\n\t\n\tUtils.pollFuns = [];\n\t\n\tUtils.poll = function () {\n\t    // 1秒轮巡\n\t    setInterval(function () {\n\t        // 便利需轮巡的数组\n\t        for (var i in Utils.pollFuns) {\n\t            // 获取需要轮巡的对象\n\t            var obj = Utils.pollFuns[i];\n\t            // 如果该值为函数类型\n\t            if (typeof obj === 'function') {\n\t                // 直接轮巡函数\n\t                obj();\n\t                // 如果为对象类型\n\t            } else {\n\t                // 获得当前延迟秒数\n\t                obj.cur = (obj.cur || obj.delay) - 1;\n\t                // 如果不需要延迟\n\t                if (obj.cur < 1) {\n\t                    // 如果对象 func 为函数类型\n\t                    if (typeof obj.func === 'function') {\n\t                        // 执行轮巡函数\n\t                        obj.func();\n\t                    }\n\t                    // 延迟时间重置\n\t                    obj.cur = obj.delay;\n\t                }\n\t            }\n\t        }\n\t    }, 1000);\n\t}();\n\t\n\tUtils.key = 0;\n\texports.default = Utils;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tmodule.exports = PubSub;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ReactDOM;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7b77685886f19613434b\n **/","import React from 'react';\r\nimport { render } from 'react-dom'\r\nimport Utils from '../src/collection/collection-utils';\r\nimport Config from './config/config';\r\nimport Local from '../build/localstorage';\r\n\r\nclass App extends React.Component { \r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {items: []}\r\n    }\r\n\r\n\tstatic getPubsub = ((colName, p) => {\r\n\t\tlet local = new Local(Config, 'en', '{\"time\": 34,\"code\": \"SUCCESS\",\"message\": \"操作成功\",\"entity\": \"\"}');\r\n\r\n        let project = window.db && window.db.project;\r\n\r\n        project.pubsub('findOne', (key, data) => {\r\n        \tconsole.log('findOne ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + Utils.isMap(data));\r\n        \t//this.setState({items: data});\r\n        })\r\n\r\n        project.pubsub('find', (key, data) => {\r\n        \tconsole.log('find ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + Utils.isList(data));\r\n        \t//this.setState({items: data});\r\n        })\r\n\r\n        project.pubsub('insert', (key, data) => {\r\n        \tconsole.log('insert ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + Utils.isMap(data));\r\n        })\r\n\r\n        project.pubsub('update', (key, data) => {\r\n        \tconsole.log('update ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + Utils.isMap(data));\r\n        })\r\n\r\n        project.pubsub('remove', (key, data) => {\r\n        \tconsole.log('remove ---------- ' + JSON.stringify(data) + ' ++++++++++ ' + Utils.isMap(data));\r\n        })\r\n    })();\r\n\r\n\thandleQuery() {\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.findOne({projectId:\"8c8c8ca956e00caa0156e8be040400dc\"});\r\n\t\tconsole.log(this.state+\"---\");\r\n\t\tconsole.log(window.localStorage.getItem('db'));\r\n\t}\r\n\r\n\thandleQueryMore() {\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.find({searchStr:\"1\"});\r\n\t\t\r\n\t\tconsole.log(window.localStorage.getItem('db'));\r\n\t}\r\n\r\n\thandleAdd() {\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.insert({projectName:\"云澹澹，水悠悠\", projectNameShort:\"sjzmd\", projectCode:\"wyqkk\", projectNameSpace:\"sjzmdqkk\", projectDesc:\"\", commonFlag:\"16001\", fileListStr:{\"inFile\":[{\"fileName\":\"item_logo_4.png\",\"fileType\":\"60100\",\"sysDefault\":\"0\"}]}, importanceLevel:\"41001\", addTagName:{\"addTagList\":[]}});\r\n\t\t\r\n\t\tconsole.log(window.localStorage.getItem('db'));\r\n\t}\r\n\r\n\thandleUpdate() {\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.update({projectId:\"8c8c8ca956e00caa0156e8be040400dc\", projectName:\"云澹澹，水悠悠，一声横笛锁空楼\"});\r\n\t\t\r\n\t\tconsole.log(window.localStorage.getItem('db'));\r\n\t}\r\n\r\n\thandleDetele() {\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.remove({projectId:\"8c8c8ca956e00caa0156e8be040400dc\"});\r\n\t\t\r\n\t\tconsole.log(window.localStorage.getItem('db'));\r\n\t}\r\n\r\n\tloginOut() {\r\n\t\twindow.location.href = 'http://www.baidu.com';\r\n\r\n\t\tlet project = window.db && window.db.project;\r\n\t\tproject.unsubscribe('findOne');\r\n\t\tproject.unsubscribe('find');\r\n\t\tproject.unsubscribe('insert');\r\n\t\tproject.unsubscribe('update');\r\n\t\tproject.unsubscribe('remove');\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input/>\r\n\t\t\t\t\t<button onClick={this.handleQuery.bind(this)}>查询</button>\r\n\t\t\t\t\t<button onClick={this.handleQueryMore}>多个查询</button>\r\n\t\t\t\t\t<button onClick={this.handleAdd}>新建</button>\r\n\t\t\t\t\t<button onClick={this.handleUpdate}>更改</button>\r\n\t\t\t\t\t<button onClick={this.handleDetele}>删除</button>\r\n\t\t\t\t\t<button onClick={this.loginOut}>跳往百度</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<table width=\"100%\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th width=\"30%\">项目编号</th>\r\n\t\t\t\t\t\t\t\t<th width=\"30%\">项目名称</th>\r\n\t\t\t\t\t\t\t\t<th width=\"20%\">项目经理</th>\r\n\t\t\t\t\t\t\t\t<th width=\"20%\">项目图片</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\t\r\n}\r\n\r\nrender(<App />, document.getElementById('index-container'));\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.jsx\n **/","module.exports = Immutable;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"Immutable\"\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _immutable = require('immutable');\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * 处理数据工具方法\r\n */\nvar CollectionUtils = function (_Utils) {\n    _inherits(CollectionUtils, _Utils);\n\n    function CollectionUtils() {\n        _classCallCheck(this, CollectionUtils);\n\n        return _possibleConstructorReturn(this, (CollectionUtils.__proto__ || Object.getPrototypeOf(CollectionUtils)).apply(this, arguments));\n    }\n\n    _createClass(CollectionUtils, null, [{\n        key: 'getList',\n\n\n        /**\r\n         * 返回一个List 对象\r\n         * @param  {初始化数组值}\r\n         * @return {[List对象]}\r\n         */\n        value: function getList(array) {\n            // 如果参数为数组类型\n            if (Array.isArray(array)) {\n                // 返回有初始值的List\n                return (0, _immutable.List)(array);\n            }\n            // 返回空值List\n            return _immutable.List.of();\n        }\n\n        /**\r\n         * 检查对象是否为Map类型\r\n         * @param  {[doc]}\r\n         * @return {Boolean}\r\n         */\n\n    }, {\n        key: 'isMap',\n        value: function isMap(doc) {\n            return _immutable.Map.isMap(doc);\n        }\n\n        /**\r\n         * 检查对象是否为List类型\r\n         * @param  {[doc]}\r\n         * @return {Boolean}\r\n         */\n\n    }, {\n        key: 'isList',\n        value: function isList(doc) {\n            return _immutable.List.isList(doc);\n        }\n\n        /**\r\n         * [getParamObj 获取调用接口所需参数]\r\n         * @param  {[doc]}\r\n         * @param  {[arr]}\r\n         * @return {普通对象}\r\n         */\n\n    }, {\n        key: 'getParamObj',\n        value: function getParamObj(doc, arr) {\n            var paramObj = {};\n\n            if ((typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) == \"object\") {\n                if (!arr[1]) {\n                    if (arr[0]) {\n                        paramObj = CollectionUtils.getKeyObj(doc, arr[0]);\n                    } else {\n                        paramObj = doc;\n                    }\n                } else {\n                    paramObj = CollectionUtils.withoutKeyObj(doc, arr[0]);\n                }\n            } else if (typeof doc == \"string\") {\n                paramObj = doc;\n            } else {\n                return false;\n            }\n\n            if (!paramObj || $.isEmptyObject(paramObj)) {\n                console.error('参数为空');\n                return false;\n            }\n\n            return paramObj;\n        }\n\n        /**\r\n         * [setLocalData 更新数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} data [插入数据]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'setLocalData',\n        value: function setLocalData(colName, data) {\n            window.db[colName].items = data;\n            window.localStorage.setItem('db', JSON.stringify(window.db));\n        }\n\n        /**\r\n         * [updateData 更新操作后更新数据]\r\n         * @param  {[data]}\r\n         * @return {普通对象}\r\n         */\n\n    }, {\n        key: 'updateData',\n        value: function updateData(colName, data, key) {\n            var db = window.db && window.db[colName].items;\n\n            if (db && db.size > 0) {\n                var _ret = function () {\n                    var nowdb = (0, _immutable.List)();\n                    var update = (0, _immutable.List)();\n\n                    db.forEach(function (val, i) {\n                        if (val[key] == data[key]) {\n                            var n;\n\n                            (function () {\n                                var oldobj = (0, _immutable.Map)(val);\n\n                                for (n in data) {\n                                    oldobj.map(function (v, j) {\n                                        if (j == n) {\n                                            update = oldobj.set(n, data[n]);\n                                        }\n                                    });\n                                }\n\n                                var newobj = update.toObject();\n                                newobj.cacheTime = new Date().getTime();\n                                nowdb = db.set(i, newobj);\n                            })();\n                        }\n                    });\n\n                    if (nowdb && nowdb.size > 0) {\n                        CollectionUtils.setLocalData(colName, nowdb);\n                    } else {\n                        console.error('更改的数据不存在！');\n                    }\n\n                    return {\n                        v: update.toObject()\n                    };\n                }();\n\n                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n            } else {\n                console.error('更改的数据不存在！');\n            }\n        }\n\n        /**\r\n         * [removeData 更新操作后更新数据]\r\n         * @param  {[data]}\r\n         * @return {普通对象}\r\n         */\n\n    }, {\n        key: 'removeData',\n        value: function removeData(colName, data, key) {\n            var db = window.db && window.db[colName].items;\n\n            if (db && db.size > 0) {\n                var nowdb = (0, _immutable.List)();\n                var remove = false;\n                var res = void 0;\n\n                db.forEach(function (val, i) {\n                    if (val[key] == data) {\n                        remove = true;\n                        nowdb = db.remove(i);\n                        res = val;\n                    }\n                });\n\n                if (remove) {\n                    CollectionUtils.setLocalData(colName, nowdb);\n                } else {\n                    console.error('删除的数据不存在！');\n                }\n\n                return res;\n            } else {\n                console.error('删除的数据不存在！');\n            }\n        }\n\n        /**\r\n         * 获取对象数据\r\n         * @param  {immutable对象||普通对象||普通数组} list 集合名称\r\n         * @param  {字符串||普通数组} key  关键词\r\n         * @return {普通对象}      \r\n         */\n\n    }, {\n        key: 'getKeyObj',\n        value: function getKeyObj(list, key) {\n\n            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n            var obj = {};\n            var keyAry = [];\n            if (key.constructor == String) {\n                keyAry.push(key);\n            } else if (key.constructor == Array) {\n                keyAry = key;\n            }\n\n            for (var i = 0; i < keyAry.length; i++) {\n                var nowKey = keyAry[i];\n                if (_immutable.Map.isMap(list)) {\n                    if (list.get(nowKey) != undefined) obj[nowKey] = list.get(nowKey);\n                } else if (list.constructor == Object) {\n                    if (list[nowKey] != undefined) obj[nowKey] = list[nowKey];\n                } else if (list.constructor == Array) {\n                    if (list[0][nowKey] != undefined) obj[nowKey] = list[0][nowKey];\n                }\n            };\n\n            return obj;\n        }\n\n        /**\r\n         * 获取对象列表数据\r\n         * @param  {普通数组} list 总列表数据\r\n         * @param  {字符串，普通数组} key  关键词\r\n         * @return {普通数组}      \r\n         */\n\n    }, {\n        key: 'getListKeyObj',\n        value: function getListKeyObj(list, key) {\n            if (!list || !key) return;\n            var listObj = [];\n            for (var i = 0; i < list.length; i++) {\n                var newObj = this.getKeyObj(list[i], key);\n                if (!CollectionUtils.isEmpty(newObj)) listObj.push(newObj);\n            };\n            return listObj;\n        }\n\n        /**\r\n         * 筛选符合查询条件的数组\r\n         * @param  {immutable数组||普通数组} list  被筛选数组\r\n         * @param  {普通对象} query 筛选对象\r\n         * @return {普通数组}       筛选出的数组\r\n         */\n\n    }, {\n        key: 'filterListKey',\n        value: function filterListKey(list, query) {\n\n            if (!list || CollectionUtils.isEmpty(list) || !query) return;\n            var result;\n            if (_immutable.List.isList(list)) {\n                return this.filterMapListKey(list, query);\n            } else if (list.constructor == Array) {\n                return this.filterMapListKey((0, _immutable.List)(list), query);\n            }\n        }\n\n        /**\r\n         * 筛选符合查询条件的immutable数组\r\n         * @param  {immutable数组} list  被筛选数组\r\n         * @param  {普通对象} query 筛选对象\r\n         * @return {普通数组}       筛选出的数组\r\n         */\n\n    }, {\n        key: 'filterMapListKey',\n        value: function filterMapListKey(list, query) {\n\n            if (!list || !query || !_immutable.List.isList(list)) return;\n\n            var mapQuery = (0, _immutable.Map)(query);\n            var mapData = list.filter(function (obj) {\n                var testHaskey = true;\n                mapQuery.map(function (val, k) {\n                    if (val != (0, _immutable.Map)(obj).get(k)) {\n                        testHaskey = false;\n                    }\n                });\n                return testHaskey;\n            });\n            return mapData;\n        }\n\n        /**\r\n         * 排除key值的对象数据\r\n         * @param  {immutable对象||普通对象} list 集合名称\r\n         * @param  {字符串||普通数组} key  关键词\r\n         * @return {普通对象}      \r\n         */\n\n    }, {\n        key: 'withoutKeyObj',\n        value: function withoutKeyObj(list, key) {\n\n            if (!list || CollectionUtils.isEmpty(list) || !key) return;\n            var obj;\n            if (_immutable.Map.isMap(list)) {\n                obj = this.withoutMapKeyObj(list, key);\n            } else if (list.constructor == Object) {\n                var newList = (0, _immutable.Map)(list);\n                obj = this.withoutMapKeyObj(newList, key);\n            } else if (list.constructor == Array) {\n                obj = [];\n                for (var i = 0; i < list.length; i++) {\n                    var rObj = this.withoutMapKeyObj((0, _immutable.Map)(list[i]), key);\n                    obj.push(rObj);\n                };\n            }\n\n            return obj;\n        }\n\n        /**\r\n         * 排除key值的immutable数组\r\n         * @param  {immutable对象} list 集合名称\r\n         * @param  {字符串||普通数组} key  关键词\r\n         * @return {普通对象}      \r\n         */\n\n    }, {\n        key: 'withoutMapKeyObj',\n        value: function withoutMapKeyObj(list, key) {\n\n            if (!list || !key || !_immutable.Map.isMap(list)) return;\n            var newList;\n            if (key.constructor == String) {\n                newList = list.filterNot(function (val, k) {\n                    return key == k;\n                });\n            } else if (key.constructor == Array) {\n                var newKey = (0, _immutable.List)(key);\n                newList = list.filterNot(function (val, k) {\n                    return newKey.includes(k);\n                });\n            }\n\n            return newList.toObject();\n        }\n    }]);\n\n    return CollectionUtils;\n}(_utils2.default);\n\nexports.default = CollectionUtils;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/collection/collection-utils.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _collection = require('./collection/collection');\n\nvar _collection2 = _interopRequireDefault(_collection);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Localstorage = function () {\n\n    /**\r\n     * [constructor 数据存储构造函数]\r\n     * @param  {[type]} colName [集合名称]\r\n     * @param  {[type]} list    [初始化列表数据]\r\n     * @return {[type]}         [description]\r\n     */\n    function Localstorage(config, i18n, mock) {\n        _classCallCheck(this, Localstorage);\n\n        // 传入配置有误情况\n        if (!config || (typeof config === 'undefined' ? 'undefined' : _typeof(config)) != 'object') {\n            console.error('没有配置或者配置错误');\n            return;\n        }\n\n        // 设置配置\n        window.collectionConfig = config;\n        // 设置集合国际化\n        window.collectionI18n = i18n || 'en';\n        // 设置默认JSON\n        if (typeof mock == 'string') {\n            window.collectionMock = JSON.parse(mock);\n        } else {\n            window.collectionMock = mock || { 'millis': 34, 'code': 'SUCCESS', 'message': '操作成功', 'entity': '' };\n        }\n\n        var oldurl = window.localStorage.getItem('oldUrl') || '';\n        var isClear = false;\n\n        if (oldurl.includes('mock') != location.href.includes('mock')) {\n            isClear = true;\n            window.localStorage.setItem('oldUrl', location.href);\n        }\n\n        if (isClear) {\n            window.localStorage.setItem('db', '{}');\n        }\n\n        window.db = {};\n        var olddb = window.localStorage.getItem('db') || '{}';\n        olddb = JSON.parse(olddb);\n\n        for (var i in config) {\n            var match = false;\n            for (var k in olddb) {\n                if (k === i) {\n                    match = true;\n                }\n            }\n\n            var list = [];\n            if (match) {\n                list = olddb[i].items;\n            }\n            window.db[i] = new _collection2.default(i, list);\n        }\n    }\n\n    /**\r\n     * [setCollectionI18n 设置集合国际化]\r\n     * @param  {[type]} i18n [国际化]\r\n     * @return {[type]}         [description]\r\n     */\n\n\n    _createClass(Localstorage, [{\n        key: 'setCollectionI18n',\n        value: function setCollectionI18n(i18n) {\n            // 设置集合国际化\n            window.collectionI18n = i18n || 'en';\n        }\n    }]);\n\n    return Localstorage;\n}();\n\nexports.default = Localstorage;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/localstorage.js\n **/","/**\r\n * 集合操作相关配置\r\n */\r\nimport Project from './project.conf.js';\r\n\r\nexport default {\r\n    \"project\": Project\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./config/config.js\n **/","/**\r\n * 项目实体配置\r\n */\r\nexport default {\r\n    //查询一个\r\n    \"findOne\": {\r\n        // 查询详情，获取Url\r\n        getUrl: (param) => {\r\n            return `/v2/project/${param}`\r\n        },\r\n        //返回链\r\n        \"returnChain\": \"entity.projectInfoList\",\r\n        // 查询详情，mock数据结构\r\n        \"return\": {\r\n            \"projectInfoList\": [{\r\n                \"projectId\": \"8c8c8ca956e00caa0156e8be040400dd\",\r\n                \"projectName\": \"来，跟我一起说：耶~\",\r\n                \"projectManager\": \"沈佳芳2233\",\r\n                \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\",\r\n                \"projectStatus\": \"14001\",\r\n                \"projectImportanceLevel\": \"41001\",\r\n                \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\",\r\n                \"projectTagList\": [{ \"tagId\": \"wherwjfpwp1\", \"systemFlag\": \"12\" }],\r\n                \"projectMember\": ['int'],\r\n                \"members\": 1,\r\n                \"projectManagerLoginName\": \"shenjiafang\",\r\n                \"projectNameSpace\": \"sjzmdqkk\",\r\n                \"projectNameForShirt\": \"sjzmd\",\r\n                \"projectCode\": \"wyqkk\",\r\n                \"commonFlag\": \"16001\"\r\n            }],\r\n            \"closeProjectInfoList\": [],\r\n            \"commonProjectInfoList\": null,\r\n            \"regularProjectInfoList\": null\r\n        },\r\n        /*//mock数据路径\r\n        \"mockUrl\": \"mock/findOne.json\",*/\r\n        // mock数据结构\r\n        \"structure\": {\r\n            \"time\": 64,\r\n            \"code\": \"SUCCESS\",\r\n            \"message\": \"操作成功\",\r\n            \"entity\": ''\r\n        },\r\n        // 数据存放字段\r\n        \"storeParam\": \"entity\"\r\n    },\r\n    //查询多个\r\n    \"find\": {\r\n        // 查询集合，获取Url\r\n        getUrl: () => {\r\n            return `v2/project/projectPage`;\r\n        },\r\n        //返回链\r\n        \"returnChain\": \"entity.projectInfoList\",\r\n        // 缓存有效期 1分钟\r\n        \"validate\": 60 * 1000,\r\n        // 数据完整性\r\n        \"fulldata\": true,\r\n        // 查询集合，mock数据结构\r\n        \"return\": {\r\n            \"joinNum\": \"\",\r\n            \"closeNum\": \"\",\r\n            \"closeProjectInfoList\": [{\r\n                \"projectId\": \"\",\r\n                \"projectImportanceLevel\": \"\",\r\n                \"commonFlag\": \"\",\r\n                \"members\": \"\",\r\n                \"projectCode\": \"\",\r\n                \"projectIcon\": \"\",\r\n                \"projectManager\": \"\",\r\n                \"projectManagerIcon\": \"\",\r\n                \"projectManagerLoginName\": \"\",\r\n                \"projectName\": \"\",\r\n                \"projectNameForShirt\": \"\",\r\n                \"projectNameSpace\": \"\",\r\n                \"projectStatus\": \"\",\r\n                \"projectTagList\": \"\"\r\n            }],\r\n            \"projectInfoList\": [{\r\n                \"projectId\": \"\",\r\n                \"projectImportanceLevel\": \"\",\r\n                \"commonFlag\": \"\",\r\n                \"members\": \"\",\r\n                \"projectCode\": \"\",\r\n                \"projectIcon\": \"\",\r\n                \"projectManager\": \"\",\r\n                \"projectManagerIcon\": \"\",\r\n                \"projectManagerLoginName\": \"\",\r\n                \"projectName\": \"\",\r\n                \"projectNameForShirt\": \"\",\r\n                \"projectNameSpace\": \"\",\r\n                \"projectStatus\": \"\",\r\n                \"projectTagList\": \"\"\r\n            }]\r\n        },\r\n        /*//mock数据路径\r\n        \"mockUrl\": \"mock/find.json\",*/\r\n        // mock数据结构\r\n        \"structure\": {\r\n            \"time\": 64,\r\n            \"code\": \"SUCCESS\",\r\n            \"message\": \"操作成功\",\r\n            \"entity\": ''\r\n        },\r\n        // 生成的mock数据存放字段\r\n        \"storeParam\": \"entity\"\r\n    },\r\n    //新增\r\n    \"insert\": {\r\n        //包含的参数，只要有include，持续层就会调用\r\n        \"include\": [\"projectName\", \"projectNameShort\", \"projectCode\", \"projectNameSpace\", \"fileListStr\", \"importanceLevel\"],\r\n        //不包含的参数，可有可无，只有在include不存在时才会执行\r\n        \"exclusive\": [\"projectId\", \"projectName\"],\r\n        getUrl: (param) => {\r\n            return `v2/project`;\r\n        },\r\n        // 查询详情，mock数据结构\r\n        \"return\": {\r\n            // 可直接规定长度，也可给值，按值的长度随机生成\r\n            \"projectId\": 32\r\n        }\r\n        /*//mock数据路径\r\n        \"mockUrl\": \"mock/insert.json\"*/\r\n    },\r\n    //修改\r\n    \"update\": {\r\n        //包含的参数，只要有include，持续层就会调用\r\n        \"include\": [\"projectId\", \"projectName\"],\r\n        //不包含的参数，可有可无，只有在include不存在时才会执行\r\n        \"exclusive\": [\"projectId\", \"projectName\"],\r\n        getUrl: (param) => {\r\n            return `v2/project/${param}`;\r\n        },\r\n        //mock数据路径\r\n        \"mockUrl\": \"mock/success.json\"\r\n    },\r\n    //删除\r\n    \"remove\": {\r\n        getUrl: (param) => {\r\n            return `/v2/project/${param}`\r\n        }/*,\r\n        //mock数据路径\r\n        \"mockUrl\": \"mock/success.json\"*/\r\n    },\r\n    // 实体相关配置\r\n    \"entity\": {\r\n        // 实体主键\r\n        \"primaryKey\": \"projectId\",\r\n        // 过期\r\n        \"cacheTimeOut\": 5184000,\r\n        // 实体字段配置，根据mock级别 + 数据类型 = mock属性长度\r\n        \"fields\": {\r\n            \"projectId\": \"string\",\r\n            \"projectName\": \"string\",\r\n            \"projectManager\": \"string\",\r\n            \"projectManagerIcon\": \"string\",\r\n            \"projectStatus\": \"string\",\r\n            \"projectImportanceLevel\": \"string\",\r\n            \"projectIcon\": \"string\",\r\n            \"members\": \"int\",\r\n            \"projectManagerLoginName\": \"string\",\r\n            \"projectNameSpace\": \"string\",\r\n            \"projectNameForShirt\": \"string\",\r\n            \"projectCode\": \"string\",\r\n            \"commonFlag\": \"string\",\r\n            \"createTime\": \"time\",\r\n            \"totalPrice\": \"money\",\r\n            \"tagId\": \"string\",\r\n            \"systemFlag\": \"int\"\r\n        }\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./config/project.conf.js\n **/","import { Map, List } from 'immutable';\r\nimport Utils from '../utils';\r\n\r\n/**\r\n * 处理数据工具方法\r\n */\r\nexport default class CollectionUtils extends Utils {\r\n\r\n    /**\r\n     * 返回一个List 对象\r\n     * @param  {初始化数组值}\r\n     * @return {[List对象]}\r\n     */\r\n    static getList(array) {\r\n        // 如果参数为数组类型\r\n        if (Array.isArray(array)) {\r\n            // 返回有初始值的List\r\n            return List(array);\r\n        }\r\n        // 返回空值List\r\n        return List.of();\r\n    }\r\n\r\n    /**\r\n     * 检查对象是否为Map类型\r\n     * @param  {[doc]}\r\n     * @return {Boolean}\r\n     */\r\n    static isMap(doc) {\r\n        return Map.isMap(doc);\r\n    }\r\n\r\n    /**\r\n     * 检查对象是否为List类型\r\n     * @param  {[doc]}\r\n     * @return {Boolean}\r\n     */\r\n    static isList(doc) {\r\n        return List.isList(doc);\r\n    }\r\n\r\n    /**\r\n     * [getParamObj 获取调用接口所需参数]\r\n     * @param  {[doc]}\r\n     * @param  {[arr]}\r\n     * @return {普通对象}\r\n     */\r\n    static getParamObj(doc, arr) {\r\n        let paramObj = {};\r\n\r\n        if (typeof(doc) == \"object\") {\r\n            if (!arr[1]) {\r\n                if (arr[0]) {\r\n                    paramObj = CollectionUtils.getKeyObj(doc, arr[0]);\r\n                } else {\r\n                    paramObj = doc;\r\n                }\r\n            } else {\r\n                paramObj = CollectionUtils.withoutKeyObj(doc, arr[0]);\r\n            }\r\n        } else if (typeof(doc) == \"string\") {\r\n            paramObj = doc;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        if (!paramObj || $.isEmptyObject(paramObj)) {\r\n            console.error('参数为空');\r\n            return false;\r\n        }\r\n\r\n        return paramObj;\r\n    }\r\n\r\n    /**\r\n     * [setLocalData 更新数据]\r\n     * @param  {[type]} colName [集合名称]\r\n     * @param  {[type]} data [插入数据]\r\n     * @return {[type]}         [description]\r\n     */\r\n    static setLocalData(colName, data) {\r\n        window.db[colName].items = data;\r\n        window.localStorage.setItem('db', JSON.stringify(window.db));\r\n    }\r\n\r\n    /**\r\n     * [updateData 更新操作后更新数据]\r\n     * @param  {[data]}\r\n     * @return {普通对象}\r\n     */\r\n    static updateData(colName, data, key) {\r\n        let db = window.db && window.db[colName].items;\r\n\r\n        if (db && db.size > 0) {\r\n            let nowdb = List();\r\n            let update = List();\r\n\r\n            db.forEach((val, i) => {\r\n                if (val[key] == data[key]) {\r\n                    let oldobj = Map(val);\r\n\r\n                    for (var n in data) {\r\n                        oldobj.map((v, j) => {\r\n                            if (j == n) {\r\n                                update = oldobj.set(n, data[n]);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    let newobj = update.toObject();\r\n                    newobj.cacheTime = new Date().getTime();\r\n                    nowdb = db.set(i, newobj);\r\n                }\r\n            });\r\n\r\n            if (nowdb && nowdb.size > 0) {\r\n                CollectionUtils.setLocalData(colName, nowdb);\r\n            } else {\r\n                console.error('更改的数据不存在！');\r\n            }\r\n\r\n            return update.toObject();\r\n        } else {\r\n            console.error('更改的数据不存在！');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [removeData 更新操作后更新数据]\r\n     * @param  {[data]}\r\n     * @return {普通对象}\r\n     */\r\n    static removeData(colName, data, key) {\r\n        let db = window.db && window.db[colName].items;\r\n\r\n        if (db && db.size > 0) {\r\n            let nowdb = List();\r\n            let remove = false;\r\n            let res;\r\n\r\n            db.forEach((val, i) => {\r\n                if (val[key] == data) {\r\n                    remove = true;\r\n                    nowdb = db.remove(i);\r\n                    res = val;\r\n                }\r\n            });\r\n\r\n            if (remove) {\r\n                CollectionUtils.setLocalData(colName, nowdb);\r\n            } else {\r\n                console.error('删除的数据不存在！');\r\n            }\r\n\r\n            return res;\r\n        } else {\r\n            console.error('删除的数据不存在！');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取对象数据\r\n     * @param  {immutable对象||普通对象||普通数组} list 集合名称\r\n     * @param  {字符串||普通数组} key  关键词\r\n     * @return {普通对象}      \r\n     */\r\n    static getKeyObj(list, key) {\r\n\r\n        if (!list || CollectionUtils.isEmpty(list) || !key) return;\r\n        var obj = {};\r\n        var keyAry = [];\r\n        if (key.constructor == String) {\r\n            keyAry.push(key);\r\n        } else if (key.constructor == Array) {\r\n            keyAry = key;\r\n        }\r\n\r\n        for (var i = 0; i < keyAry.length; i++) {\r\n            var nowKey = keyAry[i];\r\n            if (Map.isMap(list)) {\r\n                if (list.get(nowKey) != undefined) obj[nowKey] = list.get(nowKey);\r\n            } else if (list.constructor == Object) {\r\n                if (list[nowKey] != undefined) obj[nowKey] = list[nowKey];\r\n            } else if (list.constructor == Array) {\r\n                if (list[0][nowKey] != undefined) obj[nowKey] = list[0][nowKey];\r\n            }\r\n        };\r\n\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 获取对象列表数据\r\n     * @param  {普通数组} list 总列表数据\r\n     * @param  {字符串，普通数组} key  关键词\r\n     * @return {普通数组}      \r\n     */\r\n    static getListKeyObj(list, key) {\r\n        if (!list || !key) return;\r\n        var listObj = [];\r\n        for (var i = 0; i < list.length; i++) {\r\n            let newObj = this.getKeyObj(list[i], key);\r\n            if (!CollectionUtils.isEmpty(newObj)) listObj.push(newObj);\r\n        };\r\n        return listObj;\r\n    }\r\n\r\n    /**\r\n     * 筛选符合查询条件的数组\r\n     * @param  {immutable数组||普通数组} list  被筛选数组\r\n     * @param  {普通对象} query 筛选对象\r\n     * @return {普通数组}       筛选出的数组\r\n     */\r\n    static filterListKey(list, query) {\r\n\r\n        if (!list || CollectionUtils.isEmpty(list) || !query) return;\r\n        var result;\r\n        if (List.isList(list)) {\r\n            return this.filterMapListKey(list, query);\r\n        } else if (list.constructor == Array) {\r\n            return this.filterMapListKey(List(list), query);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 筛选符合查询条件的immutable数组\r\n     * @param  {immutable数组} list  被筛选数组\r\n     * @param  {普通对象} query 筛选对象\r\n     * @return {普通数组}       筛选出的数组\r\n     */\r\n    static filterMapListKey(list, query) {\r\n\r\n        if (!list || !query || !List.isList(list)) return;\r\n\r\n        var mapQuery = Map(query);\r\n        var mapData = list.filter((obj) => {\r\n            var testHaskey = true;\r\n            mapQuery.map((val, k) => {\r\n                if (val != Map(obj).get(k)) {\r\n                    testHaskey = false;\r\n                }\r\n            });\r\n            return testHaskey;\r\n        });\r\n        return mapData;\r\n\r\n    }\r\n\r\n    /**\r\n     * 排除key值的对象数据\r\n     * @param  {immutable对象||普通对象} list 集合名称\r\n     * @param  {字符串||普通数组} key  关键词\r\n     * @return {普通对象}      \r\n     */\r\n    static withoutKeyObj(list, key) {\r\n\r\n        if (!list || CollectionUtils.isEmpty(list) || !key) return;\r\n        var obj;\r\n        if (Map.isMap(list)) {\r\n            obj = this.withoutMapKeyObj(list, key);\r\n        } else if (list.constructor == Object) {\r\n            let newList = Map(list);\r\n            obj = this.withoutMapKeyObj(newList, key);\r\n        } else if (list.constructor == Array) {\r\n            obj = [];\r\n            for (var i = 0; i < list.length; i++) {\r\n                let rObj = this.withoutMapKeyObj(Map(list[i]), key);\r\n                obj.push(rObj);\r\n            };\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 排除key值的immutable数组\r\n     * @param  {immutable对象} list 集合名称\r\n     * @param  {字符串||普通数组} key  关键词\r\n     * @return {普通对象}      \r\n     */\r\n    static withoutMapKeyObj(list, key) {\r\n\r\n        if (!list || !key || !Map.isMap(list)) return;\r\n        var newList;\r\n        if (key.constructor == String) {\r\n            newList = list.filterNot((val, k) => {\r\n                return key == k;\r\n            });\r\n        } else if (key.constructor == Array) {\r\n            var newKey = List(key);\r\n            newList = list.filterNot((val, k) => {\r\n                return newKey.includes(k);\r\n            });\r\n        }\r\n\r\n        return newList.toObject();\r\n    }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./../src/collection/collection-utils.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _persist = require('./persist');\n\nvar _persist2 = _interopRequireDefault(_persist);\n\nvar _collectionUtils = require('./collection-utils');\n\nvar _collectionUtils2 = _interopRequireDefault(_collectionUtils);\n\nvar _query = require('./query');\n\nvar _query2 = _interopRequireDefault(_query);\n\nvar _pubsubJs = require('pubsub-js');\n\nvar _pubsubJs2 = _interopRequireDefault(_pubsubJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Collection = function () {\n\n    /**\r\n     * [constructor 集合操作构造函数]\r\n     * @param  {[type]} colName [集合名称]\r\n     * @param  {[type]} list    [初始化列表数据]\r\n     * @return {[type]}         [description]\r\n     */\n    function Collection(colName, list) {\n        _classCallCheck(this, Collection);\n\n        // 设置集合id\n        this.id = _collectionUtils2.default.uuid();\n        // 设置集合名称\n        this.colName = colName;\n        // 初始化参数为集合\n        this.items = _collectionUtils2.default.getList(list);\n    }\n\n    /**\r\n     * [pubsub 集合变更，事件订阅]\r\n     * @param  {Function} callback [集合变更，回调执行函数]\r\n     * @return {[type]}            [description]\r\n     */\n\n\n    _createClass(Collection, [{\n        key: 'pubsub',\n        value: function pubsub(p, callback) {\n            // 订阅指定集合的事件\n            _pubsubJs2.default.subscribe(this.pubsubKey(p), callback);\n        }\n\n        /**\r\n         * [unsubscribe 取消事件订阅]\r\n         * @param  {[type]} p [集合操作]\r\n         * @return {[type]}            [description]\r\n         */\n\n    }, {\n        key: 'unsubscribe',\n        value: function unsubscribe(p) {\n            // 取消订阅指定集合的事件\n            _pubsubJs2.default.unsubscribe(this.pubsubKey(p));\n        }\n\n        /**\r\n         * [pubsubKey 生成订阅事件key]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'pubsubKey',\n        value: function pubsubKey(p) {\n            return 'collection.' + this.colName + '.' + p + '.' + this.id;\n        }\n\n        /**\r\n         * [clearCacheData 清除缓存数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p [操作]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'findOne',\n\n\n        /**\r\n         * [findOne 查询数据详情]\r\n         * @param  {[type]} doc [查询对象 或 数据编号]\r\n         * @return {[type]}     [description]\r\n         */\n        value: function findOne(doc) {\n            var _this = this;\n\n            // 清缓存\n            Collection.clearCacheData(this.colName, 'findOne');\n\n            // 调用持久化对象 查询 数据详情\n            if (_persist2.default.isMock) {\n                // mock数据\n                var mock = _persist2.default.findOne(this.colName, doc);\n                if (mock) {\n                    if (typeof mock.then === 'function') {\n                        return mock.then(function (data) {\n                            // 集合变更，发布事件\n                            _pubsubJs2.default.publish(_this.pubsubKey('findOne'), data.nowItems);\n                        }.bind(this));\n                    } else {\n                        // 集合变更发布事件\n                        _pubsubJs2.default.publish(this.pubsubKey('findOne'), mock.nowItems);\n                    }\n                }\n            } else {\n                return _persist2.default.findOne(this.colName, doc).then(function (data) {\n                    // 集合变更发布事件\n                    _pubsubJs2.default.publish(_this.pubsubKey('findOne'), data.nowItems);\n                }.bind(this));\n            }\n\n            /*// 模仿数据\r\n            let data = Persist.findOne(this.colName, doc);\r\n            PubSub.publish(this.pubsubKey('findOne'), data.nowItems);*/\n        }\n\n        /**\r\n         * [find 根据查询器，查询集合]\r\n         * @param  {[type]} doc   [查询器]\r\n         * @param  {[type]} rtSet [返回指定键]\r\n         * @return {[type]}       [description]\r\n         */\n\n    }, {\n        key: 'find',\n        value: function find(doc, rtSet) {\n            var _this2 = this;\n\n            // 不符合查询规则\n            if (!doc || !(typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) == \"object\") return false;\n\n            // 初始化请求数据\n            var query = {};\n\n            // 如果传入数据为 object 类型\n            for (var key in doc) {\n                var value = doc[key];\n                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) != \"object\") {\n                    // 等值搜索\n                    query[key] = value;\n                } else {\n                    // 条件搜索\n                    for (var inKey in value) {\n                        // 查询器的值\n                        var inValue = value[inKey];\n                        if (inKey.indexOf(\"$\") == 0) {\n                            // 搜索查询器\n                            var tag = inKey;\n\n                            // 按照 查询器 解析 查询条件\n                            try {\n                                var v = _query2.default[tag](inValue);\n                                if (v) {\n                                    query[key] = v;\n                                } else {\n                                    return false;\n                                }\n                            } catch (e) {\n                                // 查询器暂不支持;\n                                return false;\n                            }\n                        } else {\n                            // 条件搜搜的查询器不是以 $ 开头\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            // 清缓存\n            Collection.clearCacheData(this.colName, 'find');\n\n            // 调用持久化对象 查询 数据详情\n            if (_persist2.default.isMock) {\n                // mock数据\n                var mock = _persist2.default.find(this.colName, doc);\n                if (mock) {\n                    if (typeof mock.then === 'function') {\n                        return mock.then(function (data) {\n                            // 集合变更，发布事件\n                            _pubsubJs2.default.publish(_this2.pubsubKey('find'), data.nowItems);\n                        }.bind(this));\n                    } else {\n                        // 集合变更发布事件\n                        _pubsubJs2.default.publish(this.pubsubKey('find'), mock.nowItems);\n                    }\n                }\n            } else {\n                // 调用持久化对象 查询 数据详情\n                return _persist2.default.find(this.colName, query, this).then(function (data) {\n                    // 集合变更发布事件\n                    _pubsubJs2.default.publish(_this2.pubsubKey('find'), data.nowItems);\n\n                    // if (Array.isArray(res)) { // 从缓存获取数据\n                    //         // 向集合放入新数据\n                    //         this.items = res;\n                    //     } else { // 从接口获得的数据\n                    //         // 向集合放入新数据\n                    //         this.items.push(res.data);\n                    //         // 设置过期时间\n                    //         if (res.timeout) {\n                    //             this.timeout = res.timeout;\n                    //         }\n                    //     }\n                    // }).bind(this)).catch(((error) => {\n                    //     // console.log(error)\n                }.bind(this));\n            }\n\n            /*// 模仿数据\r\n            let data = Persist.find(this.colName, doc);\r\n            PubSub.publish(this.pubsubKey('find'), data.nowItems);*/\n        }\n\n        /**\r\n         * [insert 向集合插入单条数据]\r\n         * @param  {[type]} doc [单条数据]\r\n         * @return {[type]}      [description]\r\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(doc) {\n            var _this3 = this;\n\n            // 清缓存\n            Collection.clearCacheData(this.colName, 'insert');\n            // 调用持久化对象 查询 数据详情\n            if (_persist2.default.isMock) {\n                // mock\n                var mock = _persist2.default.insert(this.colName, doc);\n                if (mock) {\n                    if (typeof mock.then === 'function') {\n                        return mock.then(function (data) {\n                            // 集合变更，发布事件\n                            _pubsubJs2.default.publish(_this3.pubsubKey('insert'), data.nowItems);\n                        }.bind(this));\n                    } else {\n                        // 集合变更，发布事件\n                        _pubsubJs2.default.publish(this.pubsubKey('insert'), mock.nowItems);\n                    }\n                }\n            } else {\n                return _persist2.default.insert(this.colName, doc).then(function (data) {\n                    // 集合变更发布事件\n                    _pubsubJs2.default.publish(_this3.pubsubKey('insert'), data.nowItems);\n                }.bind(this));\n            }\n\n            /*// 模仿数据\r\n            let data = Persist.insert(this.colName, doc);\r\n            PubSub.publish(this.pubsubKey('insert'), data.nowItems);*/\n        }\n\n        /**\r\n         * [update 更新集合中单条数据]\r\n         * @param  {[type]} doc [单条数据]\r\n         * @return {[type]}     [description]\r\n         */\n\n    }, {\n        key: 'update',\n        value: function update(doc) {\n            var _this4 = this;\n\n            // 清缓存\n            Collection.clearCacheData(this.colName, 'update');\n            // 调用持久对象，更新单条数据\n            if (_persist2.default.isMock) {\n                // mock\n                var mock = _persist2.default.update(this.colName, doc);\n                if (mock) {\n                    if (typeof mock.then === 'function') {\n                        return mock.then(function (data) {\n                            // 集合变更，发布事件\n                            _pubsubJs2.default.publish(_this4.pubsubKey('update'), data.nowItems);\n                        }.bind(this));\n                    } else {\n                        // 集合变更，发布事件\n                        _pubsubJs2.default.publish(this.pubsubKey('update'), mock.nowItems);\n                    }\n                }\n            } else {\n                return _persist2.default.update(this.colName, doc).then(function (data) {\n                    // 集合变更，发布事件\n                    _pubsubJs2.default.publish(_this4.pubsubKey('update'), data.nowItems);\n                }.bind(this));\n            }\n\n            /*// 模拟数据\r\n            let data = Persist.update(this.colName, doc)\r\n            PubSub.publish(this.pubsubKey('update'), data.nowItems);*/\n        }\n\n        /**\r\n         * [remove 向集合删除单条信息]\r\n         * @param  {[type]} doc [单条数据 或 数据编号]\r\n         * @return {[type]}     [description]\r\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(doc) {\n            var _this5 = this;\n\n            // 清缓存\n            Collection.clearCacheData(this.colName, 'remove');\n            // 调用持久对象，更新单条数据\n            if (_persist2.default.isMock) {\n                // mock\n                var mock = _persist2.default.remove(this.colName, doc);\n                if (mock) {\n                    if (typeof mock.then === 'function') {\n                        return mock.then(function (data) {\n                            // 集合变更，发布事件\n                            _pubsubJs2.default.publish(_this5.pubsubKey('remove'), data.nowItems);\n                        }.bind(this));\n                    } else {\n                        // 集合变更，发布事件\n                        _pubsubJs2.default.publish(this.pubsubKey('remove'), mock.nowItems);\n                    }\n                }\n            } else {\n                return _persist2.default.remove(this.colName, doc).then(function (data) {\n                    // 集合变更，发布事件\n                    _pubsubJs2.default.publish(_this5.pubsubKey('remove'), data.nowItems);\n                }.bind(this));\n            }\n\n            /*// 模拟数据\r\n            let data = Persist.remove(this.colName, doc);\r\n            PubSub.publish(this.pubsubKey('remove'), data.nowItems);*/\n        }\n    }], [{\n        key: 'clearCacheData',\n        value: function clearCacheData(colName, p) {\n            // 获取过期时间\n            var timeout = _persist2.default.getCacheTimeOut(colName);\n            // 当前时间\n            var time = new Date().getTime();\n            // 当前集合数据\n            var db = window.db && window.db[colName].items.toArray();\n            // 需要删除的数组初始化\n            var reArr = [];\n\n            for (var i in db) {\n                // 开始时间\n                var start = db[i].cacheTime;\n\n                // 如果过期时间不等于-1，且超过设定的缓存时间\n                if (timeout != -1 && time - timeout > start) {\n                    // 要删除的\n                    reArr.push(i);\n                }\n            }\n\n            // 倒叙\n            reArr = reArr.reverse();\n\n            for (var i = 0; i < reArr.length; i++) {\n                // 删除\n                db.splice(reArr[i], 1);\n            }\n\n            // 更新缓存数据\n            _collectionUtils2.default.setLocalData(colName, _collectionUtils2.default.getList(db));\n        }\n    }]);\n\n    return Collection;\n}();\n\nexports.default = Collection;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/collection/collection.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mockConf = require('../config/mock.conf.js');\n\nvar _mockConf2 = _interopRequireDefault(_mockConf);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MockUtils = function () {\n    function MockUtils() {\n        _classCallCheck(this, MockUtils);\n    }\n\n    _createClass(MockUtils, null, [{\n        key: 'getKeyItems',\n\n\n        /**\r\n         * [getKeyItems 获得对象key]\r\n         * @param  {[type]} obj [对象]\r\n         * @return {[type]}         [description]\r\n         */\n\n        // 三级mock数据，非常长\n\n\n        // mock数据 长度级别\n        // 一级mock数据，较正常\n        value: function getKeyItems(obj) {\n            // 初始对象key数组\n            var tmpArr = [];\n            // 遍历对象\n            for (var i in obj) {\n                // 把key值赋值给key数组\n                tmpArr.push(i);\n            }\n            // 返回key数组\n            return tmpArr;\n        }\n\n        /**\r\n         * [mockUUID 随机生成一个指定长度的UUID]\r\n         * @param  {[type]} obj [操作返回对象]\r\n         * @param  {[type]} mockStr [mock数据结构]\r\n         * @param  {[type]} sp [存放数据字段]\r\n         * @return {[type]}   [description]\r\n         */\n\n        // mock数据长度级别\n\n        // 二级mock数据，较长\n\n    }, {\n        key: 'mockUUID',\n        value: function mockUUID(obj, mockStr, sp) {\n            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n                // 获取需要uuid的主键\n                var key = MockUtils.getKeyItems(obj)[0];\n                // 获取主键长度\n                var len = obj[key].length || 32;\n                // 随机数（默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1）\n                var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n                // 赋值给主键\n                obj[key] = MockUtils.getRandomString(len, $chars);\n                // 赋值\n                mockStr[sp] = obj;\n                // 返回\n                return mockStr;\n            }\n        }\n\n        /**\r\n         * [createMockContent 生成mock数据]\r\n         * @param  {[type]} ret [操作返回对象]\r\n         * @return {[type]}   [description]\r\n         */\n\n    }, {\n        key: 'createMockContent',\n        value: function createMockContent(ret, fields) {\n            // 赋值操作返回对象\n            var obj = JSON.parse(JSON.stringify(ret));\n            // 如果返回配置是对象\n            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n                var _ret = function () {\n                    // 获取操作返回key数组\n                    var attrArr = MockUtils.getKeyItems(obj);\n                    // 长度级别数组\n                    var levelArr = _mockConf2.default[MockUtils.mockLevel] || _mockConf2.default[MockUtils.level_1];\n\n                    // 遍历\n                    attrArr.forEach(function (key, i) {\n                        // 如果字段是数组\n                        if ($.isArray(obj[key])) {\n                            // 返回数组\n                            var valArr = [];\n                            // 数组随机长度\n                            var len = MockUtils.getRandomlength(levelArr.array);\n\n                            if (_typeof(obj[key][0]) === 'object') {\n                                // 遍历\n                                for (var n = 0; n < len; n++) {\n                                    // 初始对象\n                                    var temp = {};\n                                    // 遍历\n                                    for (var m in obj[key][0]) {\n                                        // 数组内对象\n                                        temp = $.extend(temp, _defineProperty({}, m, MockUtils.getItemValue(fields[m], levelArr)));\n                                    }\n                                    // 返回数组赋值\n                                    valArr.push(temp);\n                                }\n                            } else {\n                                // 遍历\n                                for (var n = 0; n < len; n++) {\n                                    // 返回数组赋值\n                                    valArr.push(MockUtils.getItemValue(obj[key][0], levelArr));\n                                }\n                            }\n\n                            // 赋值给字段\n                            obj[key] = valArr;\n                        } else {\n                            // 其他情况字段赋值\n                            obj[key] = MockUtils.getItemValue(fields[key], levelArr);\n                        }\n                    });\n\n                    return {\n                        v: obj\n                    };\n                }();\n\n                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n            }\n        }\n\n        /**\r\n         * [getItemValue 根据类型返回相应值]\r\n         * @param {[type]} type [类型]\r\n         * @param {[type]} levelArr [长度级别数组]\r\n         */\n\n    }, {\n        key: 'getItemValue',\n        value: function getItemValue(type, levelArr) {\n            // 返回变量\n            var value = '';\n\n            if (type === 'string') {\n                // 国际化\n                var i18n = window.collectionI18n;\n                // 获取随机长度字符串\n                value = MockUtils.getSpecialItem(i18n, levelArr[i18n]);\n            } else if (type === 'int') {\n                // 随机长度数字\n                value = MockUtils.getSpecialItem('int', levelArr['int']);\n            } else if (type === 'money') {\n                // 随机长度整数\n                var integer = MockUtils.getSpecialItem('int', levelArr['int']);\n                // 浮点数，两小数位\n                value = parseFloat(integer / 100).toFixed(2);\n            } else if (type === 'time') {\n                // 时间戳\n                value = new Date().getTime();\n            }\n\n            return value;\n        }\n\n        /**\r\n         * [getRandomlength 根据数组返回随机的长度]\r\n         * @param {[type]} level [级别数组]\r\n         */\n\n    }, {\n        key: 'getRandomlength',\n        value: function getRandomlength(level) {\n            // 判断有级别\n            if (level && level.length == 2) {\n                // 范围\n                var range = level[1] - level[0] + 1;\n                // 随机数\n                var rand = Math.random();\n                // 返回级别范围内的长度\n                return level[0] + Math.round(rand * range);\n            }\n        }\n\n        /**\r\n         * [getRandomString 随机生成一个指定长度的字符串]\r\n         * @param  {[type]} obj [操作返回对象]\r\n         * @return {[type]}   [description]\r\n         */\n\n    }, {\n        key: 'getRandomString',\n        value: function getRandomString(len, chars) {\n            // 随机数长度\n            var maxPos = chars.length;\n\n            // 字符串\n            var str = '';\n            for (var i = 0; i < len; i++) {\n                // 产生随机数　\n                str += chars.charAt(Math.floor(Math.random() * maxPos));\n            }\n\n            // 返回随机生成的字符串\n            return str;\n        }\n\n        /**\r\n         * [getSpecialItem 根据类型和长度返回数据]\r\n         * @param  {[String]} type [类型]\r\n         * @param  {[int]} level [长度]\r\n         * @return {[type]}   [description]\r\n         */\n\n    }, {\n        key: 'getSpecialItem',\n        value: function getSpecialItem(type, level) {\n            if (type && level) {\n                if (type == 'int') {\n                    // 获取此类型随机长度\n                    var len = MockUtils.getRandomlength(level);\n                    // 随机数\n                    var $ints = '0123456789';\n                    // 返回随机字符串\n                    return parseInt(MockUtils.getRandomString(len, $ints));\n                } else if (type == 'en') {\n                    // 初始返回字符串\n                    var str = '';\n                    // 获取此类型随机长度\n                    var _len = MockUtils.getRandomlength(level);\n                    // 随机数（默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1）\n                    var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n                    // 返回随机字符串\n                    return MockUtils.getRandomString(_len, $chars);\n                } else if (type == 'zh') {\n                    // 编码区间数组\n                    var arr = new Array();\n                    // 获取此类型随机长度\n                    var length = MockUtils.getRandomlength(level);\n                    // 遍历\n                    for (var i = 0; i < length; i++) {\n                        // 元素赋值为汉字对应编码区间值\n                        arr[i] = Math.round(Math.random() * 20927) + 19968;\n                    }\n\n                    // 汉字数组\n                    var arr1 = new Array();\n                    // 遍历\n                    for (var i in arr) {\n                        // 元素赋值编码区间对应的汉字\n                        arr1.push(String.fromCodePoint(arr[i]));\n                    }\n                    // 返回长度级别内的汉字\n                    return arr1.join(\"\");\n                }\n            }\n        }\n    }]);\n\n    return MockUtils;\n}();\n\nMockUtils.level_1 = 'level_1';\nMockUtils.level_2 = 'level_2';\nMockUtils.level_3 = 'level_3';\n\nMockUtils.mockLevel = function () {\n    // 获得当前浏览器url\n    var href = location.href;\n\n    // 如果url包含mock\n    if (href.includes('mock')) {\n        // mock级别开始索引\n        var start = href.indexOf('mock') + 5;\n        // mock级别结束索引\n        var end = href.indexOf('&', start);\n        // 如果结束索引无效，则为url长度\n        if (end < 0) {\n            // 设置为url长度\n            end = href.length;\n        }\n        // 返回mock级别，如无规定，则返回级别一\n        return href.substring(start, end) || MockUtils.level_1;\n    }\n}();\n\nexports.default = MockUtils;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/collection/mockUtils.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mockUtils = require('./mockUtils');\n\nvar _mockUtils2 = _interopRequireDefault(_mockUtils);\n\nvar _collectionUtils = require('./collection-utils');\n\nvar _collectionUtils2 = _interopRequireDefault(_collectionUtils);\n\nvar _immutable = require('immutable');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 持久化数据对象\r\n */\nvar Persist = function () {\n    function Persist() {\n        _classCallCheck(this, Persist);\n    }\n\n    _createClass(Persist, null, [{\n        key: 'isMockUrl',\n\n\n        /**\r\n         * [isMockUrl 是否有mockurl]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @return {[type]}         [description]\r\n         */\n\n\n        // 初始化jquery\n        value: function isMockUrl(colName, oper) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合操作相关配置\n            var op = col && col[oper];\n            // 获取集合指定的json文件\n            var url = op && op.mockUrl || '';\n\n            return url;\n        }\n\n        // 是否需要mock数据\n\n    }, {\n        key: 'getStoreParam',\n\n\n        /**\r\n         * [getStoreParam 获取mock存放字段]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @return {[type]}         [description]\r\n         */\n        value: function getStoreParam(colName, oper) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合操作相关配置\n            var op = col && col[oper];\n            // 获得集合操作mock结构数据存放字段\n            var sp = op && op.storeParam || 'entity';\n\n            return sp;\n        }\n    }, {\n        key: 'mock',\n\n\n        /**\r\n         * [mock 根据集合名称、操作、参数，生产mock数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @param  {[type]} doc     [操作参数]\r\n         * @return {[type]}         [description]\r\n         */\n        value: function mock(colName, oper, doc) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合操作相关配置\n            var op = col && col[oper];\n            // 获得集合操作返回值相关配置\n            var ret = op && op.return;\n            // 获取集合fields配置\n            var mockFields = col && col.entity && col.entity.fields;\n            // 获得集合操作mock结构\n            var mockStr = op && op.structure || { \"millis\": 32, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": '' };\n            // 获得集合操作mock结构数据存放字段\n            var sp = Persist.getStoreParam(colName, oper);\n            // 获取集合主键\n            var key = Persist.getPrimaryKey(colName);\n\n            // 如果没有return参数、return为null或者return为空对象\n            if (!ret || $.isEmptyObject(ret)) {\n                // 是否有mockurl\n                var url = Persist.isMockUrl(colName, oper);\n                // 返回url地址的JSON数据或者默认JSON数据\n                return url ? url : window.collectionMock;\n\n                // 只要求返回主键情况\n            } else if (ret.hasOwnProperty(key) && Persist.getObjLength(ret) == 1) {\n                // 随机生产一个唯一标识\n                return _mockUtils2.default.mockUUID(ret, mockStr, sp);\n                // 根据return返回数据（有return和fileds一般为查询接口）\n            } else if (ret && mockFields) {\n                // 生成的对象\n                var obj = _mockUtils2.default.createMockContent(ret, mockFields);\n                // 赋值\n                mockStr[sp] = obj;\n\n                // 返回\n                return mockStr;\n            }\n        }\n\n        /**\r\n         * [getObjectLength 获得对象长度]\r\n         * @param  {[type]} obj [对象]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getObjLength',\n        value: function getObjLength(obj) {\n            // 对象初始长度为0\n            var count = 0;\n            // 遍历对象\n            for (var i in obj) {\n                // 对象长度累加\n                count++;\n            }\n            // 返回对象长度\n            return count;\n        }\n\n        /**\r\n         * [getUrl 获得集合操作url]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @param  {[type]} param   [操作参数]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getUrl',\n        value: function getUrl(colName, oper, param) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合--操作相关配置\n            var op = col && col[oper];\n            // 获得结合--操作--url\n            return op && op.getUrl(param);\n        }\n\n        /**\r\n         * [getPrimaryKey 获得集合返回链]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getReturnChain',\n        value: function getReturnChain(colName, oper) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合--操作相关配置\n            var op = col && col[oper];\n            // 获得返回链\n            return op && op.returnChain;\n        }\n\n        /**\r\n         * [getCacheTimeOut 获得集合过期时间]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} oper    [操作名称]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getCacheTimeOut',\n        value: function getCacheTimeOut(colName) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合--entity\n            var en = col && col.entity;\n            // 获得过期时间\n            return en && en.cacheTimeOut;\n        }\n\n        /**\r\n         * [getPrimaryKey 获得集合主键]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getPrimaryKey',\n        value: function getPrimaryKey(colName) {\n            // 获得集合相关配置\n            var col = window.collectionConfig[colName];\n            // 获得集合--entity\n            var en = col && col.entity;\n            // 获得主键\n            return en && en.primaryKey;\n        }\n\n        /**\r\n         * [getParamValue 获得键值对的值]\r\n         * @param  {[type]} doc [参数对]\r\n         * @param  {[type]} key [所需key]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getParamValue',\n        value: function getParamValue(doc, key) {\n            // 空则退出\n            if (!doc || !key) return false;\n            // 获得键值对\n            var param = _collectionUtils2.default.getKeyObj(doc, key);\n\n            // 如果不存在则报错退出\n            if (!param) {\n                console.error('找不到该key值');\n                return false;\n            }\n\n            // 返回该key值\n            return param[key];\n        }\n\n        /**\r\n         * [getPrimaryKeyValue 获得主键键值对的值]\r\n         * @param  {[type]} doc [参数对]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getPrimaryKeyValue',\n        value: function getPrimaryKeyValue(colName, doc) {\n            // 获取主键值\n            var val = '';\n\n            if (typeof doc == 'string') {\n                val = doc;\n            } else {\n                // 获取主键\n                var key = Persist.getPrimaryKey(colName);\n                // 获取参数中的主键值对\n                val = Persist.getParamValue(doc, key);\n            }\n\n            // 如果没有则报错退出\n            if (!val) {\n                console.error('找不到主键值');\n                return false;\n            }\n\n            return val;\n        }\n\n        /**\r\n         * [getNowdbData 获取新集合数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} chain [返回链]\r\n         * @param  {[type]} p [集合操作]\r\n         * @param  {[type]} data [插入数据]\r\n         * @param  {[type]} key [主键]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'getNowdbData',\n        value: function getNowdbData(colName, chain, p, data, key) {\n            var newdb = [];\n            var sp = Persist.getStoreParam(colName, p);\n            var d = data[sp];\n\n            if (chain) {\n                var cArr = chain.split('.');\n                newdb = data;\n\n                for (var i = 0; i < cArr.length; i++) {\n                    newdb = newdb[cArr[i]];\n                }\n            } else {\n                if (d[key]) {\n                    newdb = d;\n                } else {\n                    for (var i in d) {\n                        if (d[i] && d[i].length > 0) {\n                            newdb = d[i];\n                        }\n                    }\n                }\n            }\n\n            if (p == 'findOne' && newdb && newdb.length > 0) {\n                newdb = newdb[0];\n            }\n\n            return newdb;\n        }\n\n        /**\r\n         * [isInsert 判断是否可插入]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p [操作名称]\r\n         * @param  {[type]} data [待插入数据]\r\n         * @param  {[type]} key [主键]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'isInsert',\n        value: function isInsert(colName, p, data, key) {\n            var insert = true;\n            var db = window.db && window.db[colName] && window.db[colName].items;\n            var extend = (0, _immutable.List)();\n\n            if (db && db.size > 0) {\n                db.forEach(function (val, i) {\n                    if (val[key] == data[key]) {\n                        insert = false;\n\n                        if (p == 'findOne') {\n                            var one = $.extend({}, val, data);\n                            extend = db.set(i, one);\n                        }\n                    }\n                });\n            }\n\n            if (p == 'findOne') {\n                return $.extend({ 'isInsert': insert }, { 'extend': extend });\n            }\n\n            return insert;\n        }\n\n        /**\r\n         * [getDataKey 获得集合需要的key值对]\r\n         * [p 操作名称]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'getDataKey',\n        value: function getDataKey(colName, p) {\n            // 获得集合配置\n            var col = window.collectionConfig[colName];\n            if (col && col[p] && col[p].include) {\n                // 返回include所需参数\n                return [col && col[p] && col[p].include, false];\n            } else if (col && col[p] && col[p].exclusive) {\n                // 返回exclusive所需参数\n                return [col && col[p] && col[p].exclusive, true];\n            } else {\n                // 返回用户输入参数\n                return ['', false];\n            }\n        }\n\n        /**\r\n         * [findOne 查询集合某数据详情]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} doc     [单条数据]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'findOne',\n        value: function findOne(colName, doc) {\n            // 操作名称\n            var p = 'findOne';\n\n            // 如果需要返回mock数据\n            if (Persist.isMock) {\n                // 生成相关mock数据\n                var mock = Persist.mock(colName, p, doc);\n\n                if (typeof mock === 'string') {\n                    return $.getJSON(mock, null, function (data) {\n                        // 返回相关操作数据\n                        Persist.setFindOneData(colName, p, data);\n                    });\n                } else {\n                    // 返回相关操作数据\n                    return Persist.setFindOneData(colName, p, mock);\n                }\n            }\n\n            // 获取主键值\n            var param = Persist.getPrimaryKeyValue(colName, doc);\n            // 执行ajax请求查询某集合数据详情    \n            return $.get(Persist.getUrl(colName, 'findOne', param), null, function (data) {\n                if (data.code === 'SUCCESS') {\n                    Persist.setFindOneData(colName, p, data);\n                }\n            });\n\n            // 模拟数据\n            /*let data = { \"millis\": 32, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"allProjectNum\": null, \"joinNum\": 1, \"closeNum\": 0, \"projectInfoList\": [{ \"projectId\": \"8c8c8ca956e00caa0156e8be040400dd\", \"projectName\": \"来，跟我一起说：耶~\", \"projectManager\": \"沈佳芳2233\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"sjzmdqkk\", \"projectNameForShirt\": \"sjzmd\", \"projectCode\": \"wyqkk\", \"commonFlag\": \"16001\" }], \"closeProjectInfoList\": [], \"commonProjectInfoList\": null, \"regularProjectInfoList\": null } };\r\n            if (data.code === 'SUCCESS') {\r\n                return Persist.setFindOneData(colName, p, data);\r\n            }*/\n        }\n\n        /**\r\n         * [setFindOneData 对值进行操作]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p     [操作名称]\r\n         * @param  {[type]} data     [数据]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'setFindOneData',\n        value: function setFindOneData(colName, p, data) {\n            // 获取返回链\n            var chain = Persist.getReturnChain(colName, p);\n            // 获取主键\n            var key = Persist.getPrimaryKey(colName);\n\n            var newdb = Persist.getNowdbData(colName, chain, p, data, key);\n\n            if (!newdb) {\n                console.error(colName + '\\u8FD4\\u56DE\\u94FE' + chain + '\\uFF0C\\u914D\\u7F6E\\u6709\\u8BEF\\uFF01');\n                return;\n            }\n\n            newdb.cacheTime = new Date().getTime();\n\n            var arr = Persist.isInsert(colName, p, newdb, key);\n            var db = window.db && window.db[colName] && window.db[colName].items;\n            if (arr.isInsert && db) {\n                _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb));\n            }\n\n            if (!arr.isInsert && db) {\n                _collectionUtils2.default.setLocalData(colName, arr.extend);\n            }\n\n            var newArr = new Array(newdb);\n            data.nowItems = (0, _immutable.List)(newArr);\n\n            return data;\n        }\n\n        /**\r\n         * [find 查询数据集合]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} doc     [数据参数]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'find',\n        value: function find(colName, doc, colEntity) {\n            // 操作名称\n            var p = 'find';\n\n            // 如果需要返回mock数据\n            if (Persist.isMock) {\n                // 生成相关mock数据\n                var mock = Persist.mock(colName, p, doc);\n\n                if (typeof mock === 'string') {\n                    return $.getJSON(mock, null, function (data) {\n                        // 返回相关操作数据\n                        Persist.setFindData(colName, p, data);\n                    });\n                } else {\n                    // 返回相关操作数据\n                    return Persist.setFindData(colName, p, mock);\n                }\n            }\n\n            // 有缓存数据 && 缓存没有过期\n            /*if (window.collectionConfig[colName][p][\"fulldata\"] && new Date().getTime() <= (colEntity.timeout || 0)) {\r\n                // 获取缓存数据\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(Utils.filterListKey(colEntity.items, doc));\r\n                });\r\n            }*/\n\n            // 执行ajax请求查询某集合数据详情\n            return $.get(Persist.getUrl(colName, p, doc), doc, function (data) {\n                if (data.code === 'SUCCESS') {\n                    Persist.setFindData(colName, p, data);\n                }\n                // }).then((res) => {\n                //             // 设置过期时间\n                //             if (window.collectionConfig[colName][p][\"fulldata\"]) {\n                //                 res.timeout = new Date().getTime() + window.collectionConfig[colName][p][\"validate\"];\n                //             }\n            });\n\n            // 模拟数据\n            /*let data = { \"millis\": 40, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"allProjectNum\": null, \"joinNum\": 3, \"closeNum\": 0, \"projectInfoList\": [{ \"projectId\": \"8c8c8ca9543dbb2901544b98df3d0963\", \"projectName\": \"莫道芳时易度，朝暮1\", \"projectManager\": \"沈佳芳\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"test0425G30\", \"projectNameForShirt\": \"test\", \"projectCode\": \"test\", \"commonFlag\": \"16001\" }, { \"projectId\": \"8c8c8ca95429546201542d0888bc028d\", \"projectName\": \"何处几叶萧萧雨1\", \"projectManager\": \"沈佳芳\", \"projectManagerIcon\": \"https://file.newtouch.com/yangyang/131d4e16-6509-47d0-a46b-21c39480b89d.png\", \"projectStatus\": \"14001\", \"projectImportanceLevel\": \"41001\", \"projectIcon\": \"https://file.newtouch.com/yangyang/item_logo_4.png\", \"projectTagList\": [], \"members\": 1, \"projectManagerLoginName\": \"shenjiafang\", \"projectNameSpace\": \"123456jpg\", \"projectNameForShirt\": \"12\", \"projectCode\": \"123\", \"commonFlag\": \"16001\" }], \"closeProjectInfoList\": [], \"commonProjectInfoList\": null, \"regularProjectInfoList\": null } };\r\n            if (data.code === 'SUCCESS') {\r\n                return Persist.setFindData(colName, p, data);\r\n            }*/\n        }\n\n        /**\r\n         * [setFindData 对值进行操作]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p     [操作名称]\r\n         * @param  {[type]} data     [数据]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'setFindData',\n        value: function setFindData(colName, p, data) {\n            // 获取返回链\n            var chain = Persist.getReturnChain(colName, p);\n            // 获取主键\n            var key = Persist.getPrimaryKey(colName);\n\n            var newdb = Persist.getNowdbData(colName, chain, p, data, key);\n\n            if (!newdb) {\n                console.error(colName + '\\u8FD4\\u56DE\\u94FE' + chain + '\\uFF0C\\u914D\\u7F6E\\u6709\\u8BEF\\uFF01');\n                return;\n            }\n\n            var db = window.db && window.db[colName] && window.db[colName].items;\n\n            if (db && db.size > 0) {\n                var nowdb = (0, _immutable.List)();\n\n                for (var n in newdb) {\n                    var insert = true;\n\n                    db = nowdb.size > 0 ? nowdb : db;\n                    db.forEach(function (val, i) {\n                        newdb[n].cacheTime = new Date().getTime();\n\n                        if (val[key] == newdb[n][key]) {\n                            insert = false;\n                            nowdb = db.set(i, newdb[n]);\n                        }\n                    });\n\n                    if (insert) {\n                        _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb[n]));\n                    } else {\n                        _collectionUtils2.default.setLocalData(colName, nowdb);\n                    }\n                }\n            } else {\n                if (db) {\n                    for (var i in newdb) {\n                        newdb[i].cacheTime = new Date().getTime();\n                        _collectionUtils2.default.setLocalData(colName, window.db[colName].items.push(newdb[i]));\n                    }\n                }\n            }\n\n            data.nowItems = (0, _immutable.List)(newdb);\n            return data;\n        }\n\n        /**\r\n         * [insert 向集合插入单条数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} doc [单条数据]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(colName, doc) {\n            // 操作名称\n            var p = \"insert\";\n            // 获取实际所需参数key值\n            var arr = Persist.getDataKey(colName, p);\n            // 获取接口调用需要的参数值对\n            var paramObj = _collectionUtils2.default.getParamObj(doc, arr);\n\n            // 如果需要返回mock数据\n            if (Persist.isMock) {\n                // 生成相关mock数据\n                var mock = Persist.mock(colName, p, doc);\n\n                if (typeof mock === 'string') {\n                    return $.getJSON(mock, null, function (data) {\n                        // 返回相关操作数据\n                        Persist.setInsertData(colName, p, data, paramObj);\n                    });\n                } else {\n                    // 返回相关操作数据\n                    return Persist.setInsertData(colName, p, mock, paramObj);\n                }\n            }\n\n            // 执行ajax请求查询某集合数据详情\n            return $.post(Persist.getUrl(colName, p, doc), paramObj, function (data) {\n                if (data.code === 'SUCCESS') {\n                    Persist.setInsertData(colName, p, data, paramObj);\n                }\n            });\n\n            // 模拟数据\n            /*let data = { \"millis\": 154, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"projectId\": \"8c8c8ca956e00caa0156e8be040400dc\" } };\r\n            if (data.code === 'SUCCESS') {\r\n                return Persist.setInsertData(colName, p, data, paramObj);\r\n            }*/\n        }\n\n        /**\r\n         * [setInsertData 对值进行操作]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p     [操作名称]\r\n         * @param  {[type]} data     [数据]\r\n         * @param  {[type]} paramObj     [参数]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'setInsertData',\n        value: function setInsertData(colName, p, data, paramObj) {\n            // 获取主键\n            var key = Persist.getPrimaryKey(colName);\n\n            var sp = Persist.getStoreParam(colName, p);\n            var d = data[sp];\n            var insert = Persist.isInsert(colName, p, d, key);\n\n            if (insert) {\n                var one = $.extend({ \"cacheTime\": new Date().getTime() }, paramObj, _defineProperty({}, key, d[key]));\n\n                var db = window.db && window.db[colName] && window.db[colName].items;\n                if (db) {\n                    window.db[colName].items = window.db[colName].items.push(one);\n                    window.localStorage.setItem('db', JSON.stringify(window.db));\n                }\n\n                var newArr = new Array(one);\n                data.nowItems = (0, _immutable.List)(newArr);\n                return data;\n            } else {\n                console.error('已存在此数据，不能重复新建！');\n            }\n        }\n\n        /**\r\n         * [update 更新集合中单条数据]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} doc [单条数据]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'update',\n        value: function update(colName, doc) {\n            var p = 'update';\n\n            // 如果需要返回mock数据\n            if (Persist.isMock) {\n                // 生成相关mock数据\n                var mock = Persist.mock(colName, p, doc);\n\n                if (typeof mock === 'string') {\n                    return $.getJSON(mock, null, function (data) {\n                        // 返回相关操作数据\n                        Persist.setUpdateData(colName, p, data, doc);\n                    });\n                } else {\n                    // 返回相关操作数据\n                    return Persist.setUpdateData(colName, p, mock, doc);\n                }\n            }\n\n            // 获取实际所需参数key值\n            var arr = Persist.getDataKey(colName, p);\n            // 获取接口调用需要的参数值对\n            var paramObj = _collectionUtils2.default.getParamObj(doc, arr);\n            // 获取主键值\n            var param = Persist.getPrimaryKeyValue(colName, doc);\n            // 执行ajax请求查询某集合数据详情\n            return $.put(Persist.getUrl(colName, p, param), paramObj, function (data) {\n                if (data.code === 'SUCCESS') {\n                    Persist.setUpdateData(colName, p, data, doc);\n                }\n            });\n\n            // 模拟数据\n            /*let data = { \"millis\": 112, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": { \"serviceResultCode\": null, \"accessToken\": null, \"projectTagInfoList\": null, \"tagList\": [] } };\r\n            if (data.code === 'SUCCESS') {\r\n                return Persist.setUpdateData(colName, p, data, doc);\r\n            }*/\n        }\n\n        /**\r\n         * [setUpdateData 对值进行操作]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} p     [操作名称]\r\n         * @param  {[type]} data     [数据]\r\n         * @param  {[type]} doc     [传入参数]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'setUpdateData',\n        value: function setUpdateData(colName, p, data, doc) {\n            // 获取主键\n            var key = Persist.getPrimaryKey(colName);\n\n            var sp = Persist.getStoreParam(colName, p);\n            var d = data[sp];\n\n            if (d && d.length > 0) {\n                var newArr = new Array(_collectionUtils2.default.updateData(colName, d, key));\n                data.nowItems = (0, _immutable.List)(newArr);\n                return data;\n            } else {\n                var _newArr = new Array(_collectionUtils2.default.updateData(colName, doc, key));\n                data.nowItems = (0, _immutable.List)(_newArr);\n                return data;\n            }\n        }\n\n        /**\r\n         * [remove 向集合删除单条信息]\r\n         * @param  {[type]} colName [集合名称]\r\n         * @param  {[type]} doc [单条数据 或 数据编号]\r\n         * @return {[type]}         [description]\r\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(colName, doc) {\n            var p = 'remove';\n            // 获取主键\n            var key = Persist.getPrimaryKey(colName);\n            // 获取主键值\n            var param = Persist.getPrimaryKeyValue(colName, doc);\n\n            // 如果需要返回mock数据\n            if (Persist.isMock) {\n                // 生成相关mock数据\n                var mock = Persist.mock(colName, p, doc);\n\n                if (typeof mock === 'string') {\n                    return $.getJSON(mock, null, function (data) {\n                        // 返回相关操作数据\n                        var newArr = new Array(_collectionUtils2.default.removeData(colName, param, key));\n                        data.nowItems = (0, _immutable.List)(newArr);\n                    });\n                } else {\n                    // 返回相关操作数据\n                    var newArr = new Array(_collectionUtils2.default.removeData(colName, param, key));\n                    mock.nowItems = (0, _immutable.List)(newArr);\n                    return mock;\n                }\n            }\n\n            // 执行ajax请求查询某集合数据详情\n            return $.delete(Persist.getUrl(colName, p, param), null, function (data) {\n                if (data.code === 'SUCCESS') {\n                    var _newArr2 = new Array(_collectionUtils2.default.removeData(colName, param, key));\n                    data.nowItems = (0, _immutable.List)(_newArr2);\n                }\n            });\n\n            // 模拟数据\n            /*let data = { \"millis\": 770, \"code\": \"SUCCESS\", \"message\": \"操作成功\", \"entity\": null };\r\n            if (data.code === 'SUCCESS') {\r\n                let newArr = new Array(Utils.removeData(colName, param, key));\r\n                data.nowItems = List(newArr);\r\n                return data;\r\n            }*/\n        }\n    }]);\n\n    return Persist;\n}();\n\nPersist.initJquery = function () {\n    // ajax全局配置选项设置\n    $.ajaxSetup({\n        cache: false\n    });\n\n    // 发送ajax拦截方法\n    $(document).ajaxSend(function (evt, request, settings) {});\n\n    // ajax请求成功, 拦截后台操作错误的提示消息\n    $(document).ajaxSuccess(function (event, xhr, settings) {});\n\n    // ajax请求失败, 提示网络请求错误消息\n    $(document).ajaxError(function (event, xhr, settings, exception) {});\n\n    // 扩展jquery ajax支持put delete方法.\n    jQuery.each([\"put\", \"delete\"], function (i, method) {\n\n        jQuery[method] = function (url, data, callback, type) {\n            // shift arguments if data argument was omitted\n            if (jQuery.isFunction(data)) {\n                type = type || callback || 'json';\n                callback = data;\n                data = undefined;\n            }\n\n            return jQuery.ajax({\n                url: url,\n                type: method,\n                dataType: type,\n                data: data,\n                success: callback\n            });\n        };\n    });\n}();\n\nPersist.isMock = function () {\n    // 初始化非mock数据\n    var isMock = false;\n    // 获得当前 浏览器url\n    var href = location.href;\n\n    // 如果url包含mock\n    if (href.includes('mock')) {\n        // 需要mock数据\n        isMock = true;\n    }\n\n    return isMock;\n}();\n\nexports.default = Persist;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/collection/persist.js\n **/","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Query 查询器\r\n */\nvar Query = function () {\n  function Query() {\n    _classCallCheck(this, Query);\n  }\n\n  _createClass(Query, null, [{\n    key: \"$in\",\n\n\n    /**\r\n     * [$in 查询器 查询条件 解析]\r\n     * @param         {[type]}                 array [查询数组]\r\n     * @return        {[type]}                       [查询字符串]\r\n     */\n    value: function $in(array) {\n      return !Array.isArray(array) ? false : array.toString();\n    }\n  }]);\n\n  return Query;\n}();\n\nexports.default = Query;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/collection/query.js\n **/","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\r\n * mock数据相关配置\r\n */\nexports.default = {\n    // 一级mock数据长度设置\n    \"level_1\": {\n        \"en\": [5, 50],\n        \"zh\": [1, 20],\n        \"int\": [1, 10],\n        \"array\": [0, 20]\n    },\n    // 二级mock数据长度设置\n    \"level_2\": {\n        \"en\": [50, 100],\n        \"zh\": [20, 80],\n        \"int\": [10, 20],\n        \"array\": [20, 80]\n    },\n    // 三级mock数据长度设置\n    \"level_3\": {\n        \"en\": [100, 200],\n        \"zh\": [80, 150],\n        \"int\": [20, 100],\n        \"array\": [80, 150]\n    }\n};\n\n\n/** WEBPACK FOOTER **\n ** ./../build/config/mock.conf.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _immutable = require('immutable');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 处理数据工具方法\r\n */\nvar Utils = function () {\n    function Utils() {\n        _classCallCheck(this, Utils);\n    }\n\n    _createClass(Utils, null, [{\n        key: 'pushPollFuns',\n\n\n        /**\r\n         * [pushPollFuns 向轮巡回调数组，放入轮巡函数] todo 接收对象，时间倍数\r\n         * @param  {[type]} obj [需要轮巡的函数，结构 function 或 {func: ()=> {}, delay: 10}]\r\n         * @return {[type]}      [description]\r\n         */\n\n\n        // 轮巡回调函数数组\n        value: function pushPollFuns(obj) {\n            // 设置func 值\n            var func = obj;\n            // 如果obj 为对象类型\n            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n                // 获取对象 func 属性\n                func = obj.func;\n            }\n            // 当为函数类型\n            if (typeof func === 'function') {\n                // 向数组放置，需轮巡的函数 或对象\n                Utils.pollFuns.push(obj);\n            }\n        }\n\n        // 返回页面对象key\n\n\n        // 对系统进行轮巡\n\n    }, {\n        key: 'getKey',\n\n\n        /**\r\n         * 返回一个唯一的key <React key={Utils.getKey('react')} />\r\n         * @param  { 唯一key前缀 }\r\n         * @return {[react_1 字符串作为唯一key]}\r\n         */\n        value: function getKey(prefix) {\n            // 构建前缀字符串\n            var p = (prefix || 'key') + '_';\n            // 全局key 自增1\n            Utils.key = Utils.key + 1;\n            // 返回唯一key\n            return p + Utils.key;\n        }\n\n        /**\r\n         * [uuid 生成uuid字符串]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'uuid',\n        value: function uuid() {\n            // 返回uuid字符串\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0,\n                    v = c == 'x' ? r : r & 0x3 | 0x8;\n                return v.toString(16);\n            });\n        }\n\n        /**\r\n         * 判断是否为空\r\n         * @param  {[type]}  obj 对象\r\n         * @return {Boolean}     [description]\r\n         */\n\n    }, {\n        key: 'isEmpty',\n        value: function isEmpty(obj) {\n            if (!obj) return true;\n            if (this.isArray(obj)) {\n                return obj.length == 0;\n            } else if (this.isObject(obj)) {\n                for (var name in obj) {\n                    return false;\n                }\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'isObject',\n\n\n        /**\r\n         * 判断是否为对象\r\n         * @param  {[type]}  obj 对象\r\n         * @return {Boolean}     [description]\r\n         */\n        value: function isObject(obj) {\n            var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n            return type === 'function' || type === 'object' && !!obj;\n        }\n    }, {\n        key: 'isArray',\n\n\n        /**\r\n         * 判断是否为数组\r\n         * @param  {[type]}  obj 数组\r\n         * @return {Boolean}     [description]\r\n         */\n        value: function isArray(obj) {\n            return Array.isArray(obj) || toString.call(obj) === '[object Array]';\n        }\n    }]);\n\n    return Utils;\n}();\n\nUtils.pollFuns = [];\n\nUtils.poll = function () {\n    // 1秒轮巡\n    setInterval(function () {\n        // 便利需轮巡的数组\n        for (var i in Utils.pollFuns) {\n            // 获取需要轮巡的对象\n            var obj = Utils.pollFuns[i];\n            // 如果该值为函数类型\n            if (typeof obj === 'function') {\n                // 直接轮巡函数\n                obj();\n                // 如果为对象类型\n            } else {\n                // 获得当前延迟秒数\n                obj.cur = (obj.cur || obj.delay) - 1;\n                // 如果不需要延迟\n                if (obj.cur < 1) {\n                    // 如果对象 func 为函数类型\n                    if (typeof obj.func === 'function') {\n                        // 执行轮巡函数\n                        obj.func();\n                    }\n                    // 延迟时间重置\n                    obj.cur = obj.delay;\n                }\n            }\n        }\n    }, 1000);\n}();\n\nUtils.key = 0;\nexports.default = Utils;\n\n\n/** WEBPACK FOOTER **\n ** ./../build/utils.js\n **/","import { Map, List } from 'immutable';\r\n\r\n/**\r\n * 处理数据工具方法\r\n */\r\nexport default class Utils {\r\n\r\n    // 轮巡回调函数数组\r\n    static pollFuns = []\r\n\r\n    // 对系统进行轮巡\r\n    static poll = (() => {\r\n        // 1秒轮巡\r\n        setInterval(function() {\r\n            // 便利需轮巡的数组\r\n            for (let i in Utils.pollFuns) {\r\n                // 获取需要轮巡的对象\r\n                let obj = Utils.pollFuns[i];\r\n                // 如果该值为函数类型\r\n                if (typeof obj === 'function') {\r\n                    // 直接轮巡函数\r\n                    obj();\r\n                // 如果为对象类型\r\n                } else {\r\n                    // 获得当前延迟秒数\r\n                    obj.cur = (obj.cur || obj.delay) - 1;\r\n                    // 如果不需要延迟\r\n                    if(obj.cur < 1) {\r\n                        // 如果对象 func 为函数类型\r\n                        if(typeof obj.func === 'function') {\r\n                            // 执行轮巡函数\r\n                            obj.func();\r\n                        }\r\n                        // 延迟时间重置\r\n                        obj.cur = obj.delay;\r\n                    }\r\n                }\r\n            }\r\n        }, 1000);\r\n    })();\r\n\r\n    /**\r\n     * [pushPollFuns 向轮巡回调数组，放入轮巡函数] todo 接收对象，时间倍数\r\n     * @param  {[type]} obj [需要轮巡的函数，结构 function 或 {func: ()=> {}, delay: 10}]\r\n     * @return {[type]}      [description]\r\n     */\r\n    static pushPollFuns(obj) {\r\n        // 设置func 值\r\n        let func = obj;\r\n        // 如果obj 为对象类型\r\n        if (typeof obj === 'object') {\r\n            // 获取对象 func 属性\r\n            func = obj.func;\r\n        }\r\n        // 当为函数类型\r\n        if (typeof func === 'function') {\r\n            // 向数组放置，需轮巡的函数 或对象\r\n            Utils.pollFuns.push(obj);\r\n        }\r\n    }\r\n\r\n    // 返回页面对象key\r\n    static key = 0\r\n\r\n    /**\r\n     * 返回一个唯一的key <React key={Utils.getKey('react')} />\r\n     * @param  { 唯一key前缀 }\r\n     * @return {[react_1 字符串作为唯一key]}\r\n     */\r\n    static getKey(prefix) {\r\n        // 构建前缀字符串\r\n        let p = (prefix || 'key') + '_';\r\n        // 全局key 自增1\r\n        Utils.key = Utils.key + 1;\r\n        // 返回唯一key\r\n        return p + Utils.key;\r\n    }\r\n\r\n    /**\r\n     * [uuid 生成uuid字符串]\r\n     * @return {[type]} [description]\r\n     */\r\n    static uuid() {\r\n        // 返回uuid字符串\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 判断是否为空\r\n     * @param  {[type]}  obj 对象\r\n     * @return {Boolean}     [description]\r\n     */\r\n    static isEmpty(obj) {\r\n        if (!obj) return true;\r\n        if (this.isArray(obj)) {\r\n            return obj.length == 0;\r\n        } else if (this.isObject(obj)) {\r\n            for (var name in obj) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * 判断是否为对象\r\n     * @param  {[type]}  obj 对象\r\n     * @return {Boolean}     [description]\r\n     */\r\n    static isObject(obj) {\r\n        var type = typeof obj;\r\n        return type === 'function' || type === 'object' && !!obj;\r\n    };\r\n\r\n    /**\r\n     * 判断是否为数组\r\n     * @param  {[type]}  obj 数组\r\n     * @return {Boolean}     [description]\r\n     */\r\n    static isArray(obj) {\r\n        return Array.isArray(obj) || toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./../src/utils.js\n **/","module.exports = PubSub;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"PubSub\"\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":""}